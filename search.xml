<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>特殊的数字</title>
      <link href="/2020-01/16/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2020-01/16/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="特殊的数字"><a href="#特殊的数字" class="headerlink" title="特殊的数字"></a>特殊的数字</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p><code>问题描述</code></p><p>　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1×1×1+5×5×5+3×3×3。编程求所有满足这种条件的三位十进制数。</p><p><code>输出格式</code></p><p>　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</p></blockquote><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><blockquote><p>首先范围确定，是<code>3位</code>十进制数，其次，是循环遍历输出</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="comment">// 153是一个非常特殊的数，它等于它的每位数字的立方和，</span></span><br><span class="line"><span class="comment">// 即153=1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> g,s,b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3位数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">100</span>;j&lt;<span class="number">1000</span>;j++)&#123;</span><br><span class="line">g=j%<span class="number">10</span>;</span><br><span class="line">s=j/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">b=j/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pow</span>(g,<span class="number">3</span>)+<span class="built_in">pow</span>(s,<span class="number">3</span>)+<span class="built_in">pow</span>(b,<span class="number">3</span>)==j)<span class="comment">// 第1位等于第4位，第2位等于第3位</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">153</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">407</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 1.84 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>主要是将数字逐个拆分，然后利用<code>pow()</code>函数求立方，得满足三个数的立方和等于原数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数与特殊回文数问题</title>
      <link href="/2020-01/15/%E7%89%B9%E6%AE%8A%E5%9B%9E%E6%96%87%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2020-01/15/%E7%89%B9%E6%AE%8A%E5%9B%9E%E6%96%87%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p><code>问题描述</code></p><p>　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p><p><code>输出格式</code></p><p>　　按从小到大的顺序输出满足条件的四位十进制数。</p></blockquote><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><blockquote><p>满足条件：两端相等，长度范围确定。逐一枚举遍历</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> g,s,b,q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4位数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1000</span>;j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">g=j%<span class="number">10</span>;</span><br><span class="line">s=j/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">b=j/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">q=j/<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">if</span>(g==q&amp;&amp;s==b)<span class="comment">// 第1位等于第4位，第2位等于第3位</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1001</span><br><span class="line">1111</span><br><span class="line">1221</span><br><span class="line">1331</span><br><span class="line">1441</span><br><span class="line">1551</span><br><span class="line">1661</span><br><span class="line">1771</span><br><span class="line">1881</span><br><span class="line">1991</span><br><span class="line">2002</span><br><span class="line">2112</span><br><span class="line">2222</span><br><span class="line">2332</span><br><span class="line">2442</span><br><span class="line">2552</span><br><span class="line">2662</span><br><span class="line">2772</span><br><span class="line">2882</span><br><span class="line">2992</span><br><span class="line">3003</span><br><span class="line">3113</span><br><span class="line">3223</span><br><span class="line">3333</span><br><span class="line">3443</span><br><span class="line">3553</span><br><span class="line">3663</span><br><span class="line">3773</span><br><span class="line">3883</span><br><span class="line">3993</span><br><span class="line">4004</span><br><span class="line">4114</span><br><span class="line">4224</span><br><span class="line">4334</span><br><span class="line">4444</span><br><span class="line">4554</span><br><span class="line">4664</span><br><span class="line">4774</span><br><span class="line">4884</span><br><span class="line">4994</span><br><span class="line">5005</span><br><span class="line">5115</span><br><span class="line">5225</span><br><span class="line">5335</span><br><span class="line">5445</span><br><span class="line">5555</span><br><span class="line">5665</span><br><span class="line">5775</span><br><span class="line">5885</span><br><span class="line">5995</span><br><span class="line">6006</span><br><span class="line">6116</span><br><span class="line">6226</span><br><span class="line">6336</span><br><span class="line">6446</span><br><span class="line">6556</span><br><span class="line">6666</span><br><span class="line">6776</span><br><span class="line">6886</span><br><span class="line">6996</span><br><span class="line">7007</span><br><span class="line">7117</span><br><span class="line">7227</span><br><span class="line">7337</span><br><span class="line">7447</span><br><span class="line">7557</span><br><span class="line">7667</span><br><span class="line">7777</span><br><span class="line">7887</span><br><span class="line">7997</span><br><span class="line">8008</span><br><span class="line">8118</span><br><span class="line">8228</span><br><span class="line">8338</span><br><span class="line">8448</span><br><span class="line">8558</span><br><span class="line">8668</span><br><span class="line">8778</span><br><span class="line">8888</span><br><span class="line">8998</span><br><span class="line">9009</span><br><span class="line">9119</span><br><span class="line">9229</span><br><span class="line">9339</span><br><span class="line">9449</span><br><span class="line">9559</span><br><span class="line">9669</span><br><span class="line">9779</span><br><span class="line">9889</span><br><span class="line">9999</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 0.2804 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>回文数主要控制范围，以及满足其特征要求逐一遍历即可</p></blockquote><h1 id="特殊回文数"><a href="#特殊回文数" class="headerlink" title="特殊回文数"></a>特殊回文数</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p><code>问题描述</code></p><p>　　123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><p><code>输入格式</code></p><p>　　输入一行，包含一个正整数n。</p><p><code>输出格式</code></p><p>　　按从小到大的顺序输出满足条件的整数，每个整数占一行。</p><p><code>样例输入</code></p><p>52</p><p><code>样例输出</code></p><p>899998<br>989989<br>998899</p><p><code>数据规模和约定</code></p><p>　　1&lt;=n&lt;=54。</p></blockquote><h2 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h2><blockquote><p>首先判断是否属于回文数，这里区别在于奇数位与偶数位，奇数位中间数不等于任何两边的，这点与偶数位的不同，同时此处特殊在于，每个数位相加的和要满足等于输入的数字。<code>此处要注意是拆分每一个数位，个、十、百、千、万...的拆分</code></p></blockquote><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num,g,s,b,q,w,sw;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5位数字 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10000</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">g=i%<span class="number">10</span>;</span><br><span class="line">s=i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">b=i/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">q=i/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">w=i/<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">if</span>(g==w&amp;&amp;s==q&amp;&amp;g+s+b+q+w==num)<span class="comment">// 第1位等于第5位，第2位等于第4位；且5位数加起来等于num </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6位数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">100000</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">g=j%<span class="number">10</span>;</span><br><span class="line">s=j/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">b=j/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">q=j/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">w=j/<span class="number">10000</span>%<span class="number">10</span>;</span><br><span class="line">sw=j/<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">if</span>(g==sw&amp;&amp;s==w&amp;&amp;b==q&amp;&amp;g+s+b+q+w+sw==num)<span class="comment">// 第1位等于第5位，第2位等于第4位；且5位数加起来等于num </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">44</span><br><span class="line">99899</span><br><span class="line">499994</span><br><span class="line">589985</span><br><span class="line">598895</span><br><span class="line">679976</span><br><span class="line">688886</span><br><span class="line">697796</span><br><span class="line">769967</span><br><span class="line">778877</span><br><span class="line">787787</span><br><span class="line">796697</span><br><span class="line">859958</span><br><span class="line">868868</span><br><span class="line">877778</span><br><span class="line">886688</span><br><span class="line">895598</span><br><span class="line">949949</span><br><span class="line">958859</span><br><span class="line">967769</span><br><span class="line">976679</span><br><span class="line">985589</span><br><span class="line">994499</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 2.738 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote><p>回文数的特点在于两端数字分别相等，此处的特殊回文数则需要枚举所有的五位和六位整数，先判断它们是否为回文数，然后再计算所有数字和，判断是否为num。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10进制转16进制问题</title>
      <link href="/2020-01/15/%E7%AE%97%E6%B3%95/10%E8%BF%9B%E5%88%B6%E8%BD%AC16%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020-01/15/%E7%AE%97%E6%B3%95/10%E8%BF%9B%E5%88%B6%E8%BD%AC16%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="10进制转换为16进制数"><a href="#10进制转换为16进制数" class="headerlink" title="10进制转换为16进制数"></a>10进制转换为16进制数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>​        十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>　　给出一个非负整数，将它表示成十六进制的形式。</p><p><code>输入格式</code></p><p>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p><p><code>输出格式</code></p><p>　　输出这个整数的16进制表示</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p> 首先考虑数字的长度，其次是对10进制数的求商以及取余运算，并进行字符串拼接</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="keyword">long</span> a;</span><br><span class="line">  <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> strHex;</span><br><span class="line">  <span class="built_in">string</span> str;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">  <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  n=a%N;  <span class="comment">//取余</span></span><br><span class="line">  <span class="keyword">if</span>(n&gt;=<span class="number">10</span>)</span><br><span class="line">  strHex=<span class="keyword">char</span>(<span class="string">'A'</span><span class="number">-10</span>+n)+strHex;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">  strHex=<span class="keyword">char</span>(<span class="string">'0'</span>+n)+strHex;</span><br><span class="line">&#125; </span><br><span class="line">a=a/N;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;strHex;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4551140</span><br><span class="line">4571E4</span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 2.647 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>一个初始判断，作为如果10进制数0，转换的时候是个特殊情况，需要加以处理，其次对转换后的数字或者字母有一个合理的正确的顺序拼接</p><p><code>≥10的数字：char(&#39;A&#39;-10+n)</code></p><p><code>&lt;10的数字：char(&#39;0&#39;+n)</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10进制转16进制问题</title>
      <link href="/2020-01/15/Hexo%20theme/10%E8%BF%9B%E5%88%B6%E8%BD%AC16%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020-01/15/Hexo%20theme/10%E8%BF%9B%E5%88%B6%E8%BD%AC16%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="10进制转换为16进制数"><a href="#10进制转换为16进制数" class="headerlink" title="10进制转换为16进制数"></a>10进制转换为16进制数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>​        十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>　　给出一个非负整数，将它表示成十六进制的形式。</p><p><code>输入格式</code></p><p>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p><p><code>输出格式</code></p><p>　　输出这个整数的16进制表示</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p> 首先考虑数字的长度，其次是对10进制数的求商以及取余运算，并进行字符串拼接</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  <span class="keyword">long</span> a;</span><br><span class="line">  <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> strHex;</span><br><span class="line">  <span class="built_in">string</span> str;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">  <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  n=a%N;  <span class="comment">//取余</span></span><br><span class="line">  <span class="keyword">if</span>(n&gt;=<span class="number">10</span>)</span><br><span class="line">  strHex=<span class="keyword">char</span>(<span class="string">'A'</span><span class="number">-10</span>+n)+strHex;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">  strHex=<span class="keyword">char</span>(<span class="string">'0'</span>+n)+strHex;</span><br><span class="line">&#125; </span><br><span class="line">a=a/N;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;strHex;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4551140</span><br><span class="line">4571E4</span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 2.647 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>一个初始判断，作为如果10进制数0，转换的时候是个特殊情况，需要加以处理，其次对转换后的数字或者字母有一个合理的正确的顺序拼接</p><p><code>≥10的数字：char(&#39;A&#39;-10+n)</code></p><p><code>&lt;10的数字：char(&#39;0&#39;+n)</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16进制转10进制问题</title>
      <link href="/2020-01/15/%E7%AE%97%E6%B3%95/16%E8%BF%9B%E5%88%B6%E8%BD%AC10%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020-01/15/%E7%AE%97%E6%B3%95/16%E8%BF%9B%E5%88%B6%E8%BD%AC10%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="16进制转换为10进制数"><a href="#16进制转换为10进制数" class="headerlink" title="16进制转换为10进制数"></a>16进制转换为10进制数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><code>问题描述</code></p><blockquote><p>　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。<br>　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p></blockquote><p><code>样例输入</code></p><p>FFFF</p><p><code>样例输出</code></p><p>65535</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p>首先得将16进制数转换为4位二进制数，装入到字符串中，再从字符串总从末尾开始，逐一将2进制转换为10进制数字。(<code>从末尾转换就不存在倒序转换问题</code>)，由于题目描述16进制数可能最大为8位，则需要考虑十进制数的大小问题，此处定义采用<code>long long</code>类型。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p><code>此处当初为了循环输入输出，所以定义了数组字符串，单个可以不用数组</code></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">1</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">long</span> <span class="keyword">long</span> nNum = <span class="number">0</span>;  </span><br><span class="line">   <span class="keyword">char</span> ch;  </span><br><span class="line">   <span class="built_in">string</span> strHex[<span class="number">10</span>];<span class="comment">//16</span></span><br><span class="line">   <span class="built_in">string</span> strBin[<span class="number">10</span>];   <span class="comment">//2</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  </span><br><span class="line">   &#123;  </span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;strHex[i];  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//十六进制转二进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = <span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">while</span> (strHex[i][j])  </span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="keyword">switch</span>(strHex[i][j])  </span><br><span class="line">           &#123;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'0'</span>: strBin[i] += <span class="string">"0000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'1'</span>: strBin[i] += <span class="string">"0001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'2'</span>: strBin[i] += <span class="string">"0010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'3'</span>: strBin[i] += <span class="string">"0011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'4'</span>: strBin[i] += <span class="string">"0100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'5'</span>: strBin[i] += <span class="string">"0101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'6'</span>: strBin[i] += <span class="string">"0110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'7'</span>: strBin[i] += <span class="string">"0111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'8'</span>: strBin[i] += <span class="string">"1000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'9'</span>: strBin[i] += <span class="string">"1001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'A'</span>: strBin[i] += <span class="string">"1010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'B'</span>: strBin[i] += <span class="string">"1011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'C'</span>: strBin[i] += <span class="string">"1100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'D'</span>: strBin[i] += <span class="string">"1101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'E'</span>: strBin[i] += <span class="string">"1110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'F'</span>: strBin[i] += <span class="string">"1111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">default</span>:<span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           ++j;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//二进制转化为十进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = strBin[i].size()<span class="number">-1</span>;<span class="comment">//获得长度  </span></span><br><span class="line">       <span class="keyword">int</span> con=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (strBin[i][j] &amp;&amp; j&gt;=<span class="number">0</span>)</span><br><span class="line">       &#123;  </span><br><span class="line">       <span class="keyword">if</span>(strBin[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">       nNum+=<span class="built_in">pow</span>(<span class="number">2</span>,con);<span class="comment">//2的con次方 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&#125; </span><br><span class="line">       --j;</span><br><span class="line">       con++; </span><br><span class="line">       &#125;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;nNum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FFFACD</span><br><span class="line">16775885</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 7.885 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p> 16进制数转10进制数，就按照正常流程，一个16进制数&gt;&gt;4位2进制数，接着从最末尾开始计算权值，累加得10进制数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16进制转10进制问题</title>
      <link href="/2020-01/15/Hexo%20theme/16%E8%BF%9B%E5%88%B6%E8%BD%AC10%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020-01/15/Hexo%20theme/16%E8%BF%9B%E5%88%B6%E8%BD%AC10%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="16进制转换为10进制数"><a href="#16进制转换为10进制数" class="headerlink" title="16进制转换为10进制数"></a>16进制转换为10进制数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><code>问题描述</code></p><blockquote><p>　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。<br>　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p></blockquote><p><code>样例输入</code></p><p>FFFF</p><p><code>样例输出</code></p><p>65535</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p>首先得将16进制数转换为4位二进制数，装入到字符串中，再从字符串总从末尾开始，逐一将2进制转换为10进制数字。(<code>从末尾转换就不存在倒序转换问题</code>)，由于题目描述16进制数可能最大为8位，则需要考虑十进制数的大小问题，此处定义采用<code>long long</code>类型。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p><code>此处当初为了循环输入输出，所以定义了数组字符串，单个可以不用数组</code></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">1</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">long</span> <span class="keyword">long</span> nNum = <span class="number">0</span>;  </span><br><span class="line">   <span class="keyword">char</span> ch;  </span><br><span class="line">   <span class="built_in">string</span> strHex[<span class="number">10</span>];<span class="comment">//16</span></span><br><span class="line">   <span class="built_in">string</span> strBin[<span class="number">10</span>];   <span class="comment">//2</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  </span><br><span class="line">   &#123;  </span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;strHex[i];  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//十六进制转二进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = <span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">while</span> (strHex[i][j])  </span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="keyword">switch</span>(strHex[i][j])  </span><br><span class="line">           &#123;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'0'</span>: strBin[i] += <span class="string">"0000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'1'</span>: strBin[i] += <span class="string">"0001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'2'</span>: strBin[i] += <span class="string">"0010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'3'</span>: strBin[i] += <span class="string">"0011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'4'</span>: strBin[i] += <span class="string">"0100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'5'</span>: strBin[i] += <span class="string">"0101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'6'</span>: strBin[i] += <span class="string">"0110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'7'</span>: strBin[i] += <span class="string">"0111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'8'</span>: strBin[i] += <span class="string">"1000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'9'</span>: strBin[i] += <span class="string">"1001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'A'</span>: strBin[i] += <span class="string">"1010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'B'</span>: strBin[i] += <span class="string">"1011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'C'</span>: strBin[i] += <span class="string">"1100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'D'</span>: strBin[i] += <span class="string">"1101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'E'</span>: strBin[i] += <span class="string">"1110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'F'</span>: strBin[i] += <span class="string">"1111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">default</span>:<span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           ++j;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//二进制转化为十进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = strBin[i].size()<span class="number">-1</span>;<span class="comment">//获得长度  </span></span><br><span class="line">       <span class="keyword">int</span> con=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (strBin[i][j] &amp;&amp; j&gt;=<span class="number">0</span>)</span><br><span class="line">       &#123;  </span><br><span class="line">       <span class="keyword">if</span>(strBin[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">       nNum+=<span class="built_in">pow</span>(<span class="number">2</span>,con);<span class="comment">//2的con次方 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&#125; </span><br><span class="line">       --j;</span><br><span class="line">       con++; </span><br><span class="line">       &#125;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;nNum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FFFACD</span><br><span class="line">16775885</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 7.885 seconds with <span class="built_in">return</span> value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p> 16进制数转10进制数，就按照正常流程，一个16进制数&gt;&gt;4位2进制数，接着从最末尾开始计算权值，累加得10进制数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小寒初逢寒</title>
      <link href="/2020-01/06/%E5%B0%8F%E5%AF%92%E6%9C%AA%E5%88%9D%E9%80%A2%E5%AF%92/"/>
      <url>/2020-01/06/%E5%B0%8F%E5%AF%92%E6%9C%AA%E5%88%9D%E9%80%A2%E5%AF%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全期末复习</title>
      <link href="/2019-12/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019-12/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="选择题（2分×10）"><a href="#选择题（2分×10）" class="headerlink" title="选择题（2分×10）"></a><code>选择题（2分×10）</code></h1><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><blockquote><p>(1)计算机网络安全是指利用计算机网络管理控制和技术措施，保证在网络环境中数据的(   )、完整性、网络服务可用性和可审查性受到保护。<br><code>A.保密性</code>  B.抗攻击性  C. 网络服务管理性  D.控制安全性</p></blockquote><blockquote><p>(2)网络安全的实质和关键是保护网络的(   ) 安全。<br>A.系统  B.软件  <code>C.信息</code>  D.网站</p></blockquote><blockquote><p>(3)实际上，网络安全包括两大方面内容，一是(   )，二是网络的信息安全。<br>A.网络服务安全  B.网络设备安全  C.网络环境安全  <code>D.网络系统安全</code></p></blockquote><blockquote><p>(4)在短时间内向网络中的某台服务器发送大量无效连接请求，导致合法用户暂时无法访问服务器的攻击行为是破坏了(   ) 。<br>A.保密性  B.完整性  <code>C.可用性</code>  D.可控性</p></blockquote><blockquote><p>(5)如果访问者有意避开系统的访问控制机制，则该访问者对网络设备及资源进行非正常使用属于(   )。<br>A.破坏数据完整性  <code>B.非授权访问</code>  C.信息泄露  D.拒绝服务攻击</p></blockquote><blockquote><p>(6)计算机网络安全是门涉及计算机科学、 网络技术、信息安全技术、 通信技术、<br>应用数学、密码技术和信息论等多学科的综合性学科，是(   ) 的重要组成部分。<br><code>A.信息安全学科</code>  B.计算机网络学科  C.计算机学科  D.其他学科</p></blockquote><blockquote><p>(7) 实体安全包括(   )。<br>A.环境安全和设备安全  <code>B.环境安全、设备安全和媒体安全</code><br>C.物理安全和环境安全  D.其他方面</p></blockquote><blockquote><p>(8)在网络安全中，常用的关键技术可以归纳为(   ) 三大类。<br>A.计划、检测、防范  B.规划、监督、组织<br>C.检测、防范、监督  <code>D.预防保护、检测跟踪、响应恢复</code></p></blockquote><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><blockquote><p>(1)加密安全机制提供了数据的(  )。<br>A.保密性和可控性  B.可靠性和安全性C.完整性和安全性  <code>D.保密性和完整性</code></p></blockquote><blockquote><p>(2)SSL协议是(  )之间实现加密传输的协议。<br><code>A.传输层和应用层</code>  B.物理层和数据层 C.物理层和系统层  D.物理层和网络层</p></blockquote><blockquote><p>(3)实际应用时一般利用(   )加密技术进行密钥的协商和交换，利用(   )加密技术进行用户数据的加密。<br>A.非对称  非对称  <code>B.非对称  对称</code>   C.对称 对称     D.对称 非对称</p></blockquote><blockquote><p>(4)能在物理层、链路层、网络层、传输层和应用层提供的网络安全服务的是(   )。<br>A.认证服务    <code>B.数据保密性服务</code>   C.数据完整性服务   D.访问控制服务</p></blockquote><blockquote><p>(5)传输层由于可以提供真正的端到端的连接，最适宜提供(   ) 安全服务。<br>A.数据完整性    B.访问控制服务  C.认证服务    <code>D.数据保密性及以上各项</code></p></blockquote><blockquote><p>(6) VPN的实现技术包括(   )。<br>A.隧道技术      B.加解密技术  C.密钥管理技术  <code>D.身份认证及以上技术</code></p></blockquote><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><blockquote><p>(1)网络安全保障包括信息安全策略和(  )。<br>A.信息安全管理     B. 信息安全技术  C.信息安全运作     <code>D.上述3点</code></p></blockquote><blockquote><p>(2)网络安全保障体系框架的外围是(  )。<br>A.风险管理         B.法律法规    C.标准的符合性     <code>D.上述3点</code></p></blockquote><blockquote><p>(3)名字服务、事务服务、时间服务和安全性服务是(   ) 提供的服务。<br>A.远程IT管理整合式应用管理技术    B. APM网络安全管理技术<br><code>C. CORBA网络安全管理技术</code>         D.基于Web的网络管理模式</p></blockquote><blockquote><p>(4)一种全局的、全员参与的、事先预防、事中控制、事后纠正、动态的运作管理模式，是基于风险管理理念和(   )。<br><code>A.持续改进模式的信息安全运作模式</code>   B. 网络安全管理模式<br>C.一般信息安全运作模式             D.以上都不对</p></blockquote><blockquote><p>(5)我国网络安全立法体系框架分为(   )。<br>A.构建法律、地方性法规和行政规范<br><code>B.法律、行政法规和地方性法规、规章、规范性文档</code><br>C.法律、行政法规和地方性法规<br>D.以上都不对</p></blockquote><blockquote><p>(6)网络安全管理规范是为保障实现信息安全政策的各项目标而制定的一系列管理规定和规程，具有(   )<br>A.一般要求      B.法律要求    <code>C.强制效力</code>     D.文件要求</p></blockquote><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><blockquote><p>(1)在黑客攻击技术中，(   ) 是黑客发现并获得主机信息的一种最佳途径。<br><code>A.端口扫描</code>       B.缓冲区溢出    C.网络监听       D.口令破解</p></blockquote><blockquote><p>(2)-般情况下， 大多数监听工具不能够分析的协议是(  )。<br>A.标准以太网     B. TCP/IP   <code>C. SNMP和CMIS</code>  D. IPX 和DECNet</p></blockquote><blockquote><p>(3)改变路由信息、修改Windows NT注册表等行为属于拒绝服务攻击的(  )方式。<br>A.资源消耗型     <code>B.配置修改型</code>   C.服务利用型     D.物理破坏型</p></blockquote><blockquote><p>(4) (   )利用以太网的特点，将设备网卡设置为“混杂模式”，从而能够接收到整个以太网内的网络数据信息。<br>A.缓冲区溢出攻击   B.木马程序     <code>C.嗅探程序</code>      D.拒绝服务攻击</p></blockquote><blockquote><p>(5)字典攻击被用于( )。<br>A.用户欺骗         B.远程登录     C.网络嗅探         <code>D.破解密码</code></p></blockquote><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><blockquote><p>(1)使用密码技术不仅可以保证信息的(   )， 而且可以保证信息的完整性和准确性，防止信息被篡改、伪造和假冒。</p><p><code>A.机密性</code>         B.抗攻击性    C.网络服务正确性    D.控制安全性</p></blockquote><blockquote><p>(2)网络加密常用的方法有链路加密、(   ) 加密和结点加密3种。<br>A.系统          <code>B.端到端</code>       C.信息       D.网站</p></blockquote><blockquote><p>(3)根据密码分析者破译时已具备的前提条件，通常人们将攻击类型分为4种:一是(   ), 二是  (   ),三是选择明文攻击， 四是选择密文攻击。<br>A.已知明文攻击、选择密文攻击   B.选定明文攻击、已知明文攻击<br>C.选择密文攻击、唯密文攻击    <code>D.唯密文攻击、已知明文攻击</code></p></blockquote><blockquote><p>(4) (   )密码体制不但具有保密功能，并且具有鉴别的功能。<br>A.对称           B.私钥      C.非对称        <code>D.混合加密体制</code></p></blockquote><blockquote><p>(5)凯撒密码是(   )方法，被称为循环移位密码，其优点是密钥简单易记，缺点是安全性较差。<br>A.代码加密      <code>B.替换加密</code>    C.变位加密      D.一次性加密</p></blockquote><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><blockquote><p>(1)在常用的身份认证方式中，(   ) 是采用软、硬件相结合、一次一密的强双因子认证模式，具有安全性、移动性和方便性。<br>A.智能卡认证     B.动态令牌认证<br><code>C. USB Key</code>       D.用户名及密码方式认证</p></blockquote><blockquote><p>(2)以下(   )属于生物识别中的次级生物识别技术。<br>A.网膜识别       B. DNA    <code>C.语音识别</code>       D.指纹识别</p></blockquote><blockquote><p>(3)数据签名的(   )功能是指签名可以证明是签字者而不是其他人在文件上签字。<br><code>A.签名不可伪造</code>    B.签名不可变更    C.签名不可抵赖    D.签名是可信的</p></blockquote><blockquote><p>(4)在综合访问控制策略中，系统管理员权限、读/写权限和修改权限属于(   )。<br>A.网络的权限控制     B.属性安全控制<br>C.网络服务安全控制   <code>D.目录级安全控制</code></p></blockquote><blockquote><p>(5)以下(   )不属于AAA系统提供的服务类型。<br>A.认证       B.鉴权    <code>C.访问</code>       D.审计</p></blockquote><h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><blockquote><p>(1)计算机病毒的主要特点不包括(   )。<br>A.潜伏性  B.破坏性   C.传染性  <code>D.完整性</code></p></blockquote><blockquote><p>(2)熊猫烧香是一种(   )。<br>A.游戏  B.软件  <code>C.蠕虫病毒</code>  D.网站</p></blockquote><blockquote><p>(3)木马的清除方式有(  )和(  )两种。<br>A.自动清除      <code>B.手动清除</code>    <code>C.杀毒软件清除</code>  D.不用清除</p></blockquote><blockquote><p>(4)计算机病毒是能够破坏计算机正常工作的、(  )的一组计算机指令或程序。<br>A.系统自带    <code>B.人为编制</code>   C.机器编制    D.不清楚</p></blockquote><blockquote><p>(5)强制安装和难以卸载的软件都属于(  )。<br>A.病毒    B.木马   C.蠕虫    <code>D.恶意软件</code></p></blockquote><h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><blockquote><p>(1)拒绝服务攻击的一个基本思想是(   )。<br>A.不断发送垃圾邮件工作站   B.迫使服务器的缓冲区占满<br><code>C.工作站和服务器停止工作</code>   D.服务器停止工作</p></blockquote><blockquote><p>(2) TCP采用三次握手形式建立连接，在(   ) 时候开始发送数据。<br>A.第一步       B.第二步    <code>C.第三步之后</code>   D.第三步</p></blockquote><blockquote><p>(3)驻留在多个网络设备上的程序在短时间内产生大量的请求信息冲击某Web服务器，导致该服务器不堪重负，无法正常响应其他合法用户的请求，这属于(   )。<br>A.上网冲浪   B.中间人攻击   <code>C. DDoS攻击</code>   D. MAC攻击</p></blockquote><blockquote><p>(4)关于防火墙，以下(   ) 说法是错误的。<br>A.防火墙能隐藏内部IP地址<br>B.防火墙能控制进出内网的信息流向和信息包<br>C.防火墙能提供VPN功能<br><code>D.防火墙能阻止来自内部的威胁</code></p></blockquote><blockquote><p>(5)以下说法正确的是(   )。<br>A.防火墙能够抵御一切网络攻击<br>B.防火墙是一种主动安全策略执行设备<br>C.防火墙本身不需要提供防护<br><code>D.防火墙如果配置不当，会导致更大的安全风险</code></p></blockquote><h1 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h1><blockquote><p>(1)攻击者入侵的常用手段之是试图获得 Administrator 账户的口令。每台主机至少需要一个账户拥有Aminstor (管理员)权限，但不一定必须用Administratr这个名称，可以是(   )。<br>A. Guest    B. Everyone    C. Admin    <code>D. LifeMiniator</code></p></blockquote><blockquote><p>(2) UNIX是一个多用户系统，一般用户对系统的使用是通过用户(   )进入的。用<br>户进入系统后就有了删除、修改操作系统和应用系统的程序或数据的可能性。<br><code>A.注册</code>    B.入侵    C.选择    D.指纹</p></blockquote><blockquote><p>(3) IP地址欺骗是很多攻击的基础，之所以使用这个方法，是因为IP路由IP包时对IP头中提供的(    )不做任何检查。<br>A.IP目的地址  B.源端口  <code>C. IP源地址</code>  D.包大小</p></blockquote><blockquote><p>(4)Web站点服务体系结构中的B/S/D分别指浏览器、(   )和数据库。<br><code>A.服务器</code>  B.防火墙系统  C.入侵检测系统  D.中间层</p></blockquote><blockquote><p>(5)系统恢复是指操作系统在系统无法正常运作的情况下，通过调用已经备份好的系统资料或系统数据，使系统按照备份时的部分或全部正常启动运行的(   ) 来进行运作。<br>A.状态  <code>B.数值特征</code>  C.时间  D.用户</p></blockquote><blockquote><p>(6)入侵者通常会使用网络嗅探器获得在网络上以明文传输的用户名和口令。当判断系统是否被安装嗅探器时，首先要看当前是否有进程使网络接口处于(  )。<br>A.通信模式  <code>B.混杂模式</code>  C.禁用模式  D.开放模式</p></blockquote><h1 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h1><blockquote><p>(1)数据库系统的安全不仅依赖自身内部的安全机制，还与外部网络环境、应用环境、从业人员素质等因素息息相关，因此，数据库系统的安全框架划分为3个层次:网络系统层、宿主操作系统层和(   )，3个层次一起形成数据库系统的安全体系。<br>A.硬件层   <code>B.数据库管理系统层</code>  C.应用层   D.数据库层</p></blockquote><blockquote><p>(2)数据完整性是指数据的精确性和(   )。它是为防止数据库中存在不符合语义规定的数据和防止因错误信息的输入/输出造成无效操作或错误信息而提出的。 数据完整性分为4类:实体完整性(Entity Integrity)、域完整性(Domin Integrity)、参照完整性(Referential lnegrity )和用户定义的完整性(User-defined Integrity)<br>A.完整性   B.一致性   <code>C.可靠性</code>   D.实时性</p></blockquote><blockquote><p>(3)本质上，网络数据库是一种能通过计算机网络通信进行组织、(  )和检索的相关数据集合。<br>A.查找   <code>B.存储</code>   C.管理   D.修改</p></blockquote><blockquote><p>(4)考虑到数据备份效率、数据存储空间等相关因素，数据备份可以考虑完全备份(备份)与(   )备份两种方式。<br>A.事务   B.日志   <code>C.增量</code>   D.文件</p></blockquote><blockquote><p>(5)保障网络数据库系统安全，不仅涉及应用技术，还包括管理等层面上的问题，是各个防范措施综合应用的结果，是物理安全、网络安全和(  )安全等方面的防范策略的有效结合。<br><code>A.管理</code>   B.内容   C.系统   D.环境</p></blockquote><blockquote><p>(6)通常，数据库的保密性和可用性之间不可避免地存在冲突。对数据库加密必然会带来数据存储与索引、(   )和管理等一系列问题。</p><p>A.有效查找   B.访问特权   C.用户权限   <code>D.密钥分配</code></p></blockquote><h1 id="填空题（10题，20分，一空一分）"><a href="#填空题（10题，20分，一空一分）" class="headerlink" title="填空题（10题，20分，一空一分）"></a><code>填空题（10题，20分，一空一分）</code></h1><h1 id="第一章-1"><a href="#第一章-1" class="headerlink" title="第一章"></a>第一章</h1><blockquote><p>(1)计算机网络安全是一门涉及<code>计算机科学</code>、<code>网络技术</code>、<code>信息安全技术</code>、<code>通信技术</code>、应用数学、密码技术和信息论等多学科的综合性学科。</p></blockquote><blockquote><p>(2)网络信息安全的五大要素和技术特征分别是<code>保密性</code>、<code>完整性</code>、<code>可用性</code>、<code>可控性</code>和<code>不可否认性</code>。</p></blockquote><blockquote><p>(3)从层次结构上，计算机网络安全所涉及的内容包括<code>实体安全</code>、<code>运行安全</code>、<code>系统安全</code>、<code>应用安全</code>和<code>管理安全</code>5个方面。</p></blockquote><blockquote><p>(4)网络安全的目标是在计算机网络的信息传输、存储与处理的整个过程中，提高的<code>防护</code>、<code>监控</code>、<code>反应恢复</code>和<code>对抗</code>的能力。</p></blockquote><blockquote><p>(5)网络安全关键技术分为<code>身份认证</code>、<code>访问管理</code>、<code>加密</code>、<code>防恶意代码</code>、<code>加固</code>、<code>监控</code>、<code>审核跟踪</code>和<code>备份恢复</code>八大类。</p></blockquote><blockquote><p>(6)网络安全技术的发展趋势具有<code>多维主动</code>、<code>综合性</code>、<code>智能化</code>、<code>全方位防御</code>的特点。</p></blockquote><blockquote><p>(7)国际标准化组织(ISO)提出信息安全的定义是:为数据处理系统建立和采取的<code>技术和管理保护</code>，保护计算机硬件、软件及数据不因<code>偶然和恶意</code>的原因而遭到破坏、更改和泄露。</p></blockquote><blockquote><p>(8)利用网络安全模型可以构建<code>网络安全体系和结构</code>，进行具体的网络安全方案的制定、规划、设计和实施等，也可以用于实际应用过程的<code>描述和研究</code>。</p></blockquote><h1 id="第二章-1"><a href="#第二章-1" class="headerlink" title="第二章"></a>第二章</h1><blockquote><p>(1) 安全套接层服务(SSL)协议是在网络传输过程中，提供通信双方网络信息<br><code>保密性</code>和<code>可靠性</code>。由<code>SSL协商层</code>和<code>记录层</code>两层组成。</p></blockquote><blockquote><p>(2) OSI/RM开放式系统互联参考模型7层协议是<code>物理层</code>、<code>数据链路层</code>、<code>传输层</code>、<code>网络层</code>、<code>会话层</code>、<code>表示层</code>和<code>应用层</code>。</p></blockquote><blockquote><p>(3) ISO对OSI规定了<code>有效性</code>、<code>保密性</code>、<code>完整性</code>、<code>可靠性</code>和<code>不可否认性</code>5种级别的安全服务。</p></blockquote><blockquote><p>(4)应用层安全可分解为<code>网络层</code>、<code>操作系统</code>和<code>数据库安全</code>，利用各种协议运行和管理。</p></blockquote><blockquote><p>(5) 与OSI参考模型不同，TCP/IP模型由低到高依次由<code>网络接口层</code>、<code>网络层</code>、<code>传输层</code>和<code>应用层</code>4部分组成。</p></blockquote><blockquote><p>(6)一个VPN连接由<code>客户机</code>、<code>隧道</code>和<code>服务器</code>3部分组成。</p></blockquote><blockquote><p>(7)一个高效、成功的VPN具有<code>安全保障</code>、<code>服务质量保证</code>、<code>可扩充性</code>和<code>灵活性和可管理性</code>4个特点。</p></blockquote><h1 id="第三章-1"><a href="#第三章-1" class="headerlink" title="第三章"></a>第三章</h1><blockquote><p>(1)信息安全保障体系架构包括5个部分:<code>信息安全战略</code>、<code>信息安全政策和标准</code>、<code>信息安全运作</code>、<code>信息安全管理</code>和<code>信息安全技术</code>。</p></blockquote><blockquote><p>(2) TCP/IP网络安全管理体系结构包括3个方面: <code>分层安全管理</code>、<code>安全服务与机制</code>和<code>系统安全管理</code>。</p></blockquote><blockquote><p>(3) <code>信息安全管理体系</code>是信息安全保障体系的一个重要组成部分，按照<code>多层防护</code>的思想，为实现信息安全战略而搭建。一般来说，防护体系包括<code>认知宣传教育</code>、<code>组织管理控制</code>、<code>审计监督</code>三层防护结构。</p></blockquote><blockquote><p>(4)信息安全标准是确保信息安全的产品和系统，在设计、研发、生产、建设、使用及测评过程中，解决产品和系统的<code>一致性</code>、<code>可靠性</code>、<code>可控性</code>、<code>先进性</code>和<code>符合性</code>的技术规范、技术依据。</p></blockquote><blockquote><p>(5)网络安全策略包括3个重要组成部分: <code>安全立法</code>、<code>安全管理</code>、和<code>安全技术</code></p></blockquote><blockquote><p>(6)网络安全保障包括<code>信息安全策略</code>、<code>信息安全管理</code>、<code>信息安全运作</code>和<code>信息安全技术</code>4个方面。</p></blockquote><blockquote><p>(7) TCSEC是可信计算系统评价准则的缩写，又称网络安全橙皮书，将安全分为<br><code>安全政策</code>、<code>可说明性</code>、<code>安全保障</code>和<code>文档</code>4方面。</p></blockquote><blockquote><p>(8)通过对计算机网络系统进行全面、充分、有效的安全测评，能够快速查出<br><code>网络安全隐患</code>、<code>安全漏洞</code>和<code>网络系统的抗攻击能力</code></p></blockquote><blockquote><p>(9)实体安全的内容主要包括<code>环境安全</code>、<code>设备安全</code>和<code>媒体安全</code>3个方面，主要指5项防护(简称5防):防盗、防火、防静电、防雷击、防电磁泄露。</p></blockquote><blockquote><p>(10)基于软件的软件保护方式一般分为:注册码、许可证文件、许可证服务器、<br><code>应用服务器模式</code>和<code>软件老化</code>等。</p></blockquote><h1 id="第四章-1"><a href="#第四章-1" class="headerlink" title="第四章"></a>第四章</h1><blockquote><p>(1)黑客的“攻击五部曲”是<code>隐藏IP</code>、<code>踩点扫描</code>、<code>获得特权攻击</code>、<code>种植后门</code>、和<code>隐身退出</code></p></blockquote><blockquote><p>(2)端口扫描的防范也称为<code>系统“加固”</code>，主要有<code>防止IP地址的扫描</code>和<code>关闭闲置及有潜在危险的端口</code>。</p></blockquote><blockquote><p> (3)黑客攻击计算机的手段可分为破坏性攻击和非破坏性攻击。常见的黑客行为有<code>盗窃资料</code>、<code>攻击网站</code>、<code>恶作剧</code>、告知漏洞和获取目标主机系统的非法访问权。</p></blockquote><blockquote><p>(4) <code>分布式拒绝服务攻击DDoS</code>就是利用更多的傀儡机对目标发起进攻，以比从前更大的规模进攻受害者。</p></blockquote><blockquote><p>(5)按数据来源和系统结构分类，入侵检测系统分为<code>基于主机</code>、<code>基于网络</code>和<code>分布式(混合型)</code> 3类。</p></blockquote><h1 id="第五章-1"><a href="#第五章-1" class="headerlink" title="第五章"></a>第五章</h1><blockquote><p>(1)现代密码学是一门涉及<code>数学</code>、<code>物理学</code>、信息论和计算机科学等多学科的综合性学科。</p></blockquote><blockquote><p>(2)密码技术包括<code>密码算法设计</code>、<code>密码分析</code>、<code>安全协议</code>、<code>身份认证</code>、<code>数字签名</code>、<code>密钥管理</code>、消息确认和密钥托管等多项技术。</p></blockquote><blockquote><p>(3)在加密系统中原有的信息称为<code>明文</code>，由<code>明文</code>变为<code>密文</code>的过程称为加密，由<code>密文</code><br>还原成<code>明文</code>的过程称为解密。</p></blockquote><blockquote><p>(4)常用的传统加密方法有4种: <code>代码加密</code>、<code>替换加密</code>、<code>边位加密</code>和<code>一次性加密</code></p></blockquote><h1 id="第六章-1"><a href="#第六章-1" class="headerlink" title="第六章"></a>第六章</h1><blockquote><p>(1)身份认证是计算机网络系统的用户在进入系统或访问不同<code>身份级别</code>的系统资源时，系统确认该用户的身份是否<code>真实</code>、<code>合法</code>、<code>唯一</code>的过程。</p></blockquote><blockquote><p>(2)数字签名是指用户用自己的<code>私钥</code>对原始数据进行<code>加密</code>所得到<code>特殊数字串</code>，专门用于保证信息来源的<code>真实性</code>、数据传输的<code>完整性</code>和<code>防抵赖性</code>。</p></blockquote><blockquote><p>(3)访问控制包括3个要素，即<code>主体</code>、<code>客体</code>和<code>控制策略</code>访问的主要内容包括<code>认证、控制策略实现</code>和<code>审计</code>3个方面。</p></blockquote><blockquote><p>(4)访问控制模式有3种，即<code>自主访问控制(DAC)</code>、<code>强制访问控制(MAC)</code>和<code>基本角色的访问控制(RBAC)</code>。</p></blockquote><blockquote><p>(5)计算机网络安全审计是通过一定的<code>安全策略</code>，利用<code>记录及分析</code>系统活动和用户活动的历史操作事件，按照顺序<code>检查</code>，<code>审查</code>和<code>检验</code>每个事件的环境及活动，是对防火墙技术和入侵检测技术等网络安全技术的重要补充和完善。</p></blockquote><h1 id="第七章-1"><a href="#第七章-1" class="headerlink" title="第七章"></a>第七章</h1><blockquote><p>(1)根据计算机病毒的破坏程度可将病毒分为<code>无害型病毒</code>、<code>危险型病毒</code>和<br><code>毁灭型病毒</code>。</p></blockquote><blockquote><p>(2)计算机病毒一般由<code>引导单元</code>、<code>传染单元</code>和<code>触发单元</code>3个单元构成。</p></blockquote><blockquote><p>(3)计算机病毒的传染单元主要包括<code>传染控制模块</code>、<code>传染判断模块</code>和<code>传染操作模块</code>3个模块。</p></blockquote><blockquote><p>(4)计算机病毒根据病毒依附载体可划分为<code>引导区病毒</code>、<code>文件型病毒</code>、<code>复合型病毒</code>、<code>宏病毒</code>和<code>蠕虫病毒</code>。</p></blockquote><blockquote><p>(5)计算机病毒的主要传播途径有<code>移动存储介质</code>和<code>网络传播</code>。</p></blockquote><blockquote><p>(6)计算机运行异常的主要现象包括<code>无法开机</code>、<code>开机速度变慢</code>、<code>系统运行速度慢</code>、<code>频繁重启</code>、<code>无故死机</code>和<code>自动关机</code>等。</p></blockquote><h1 id="第八章-1"><a href="#第八章-1" class="headerlink" title="第八章"></a>第八章</h1><blockquote><p>(1)防火墙隔离了内、外部网络，是内、外部网络通信的<code>唯一</code>途径，能够根据制定的访问规则对流经它的信息进行监控和审查，从而保护内部网络不受外界的非法访问和攻击。</p></blockquote><blockquote><p>(2)防火墙是一种<code>被动</code>设备，即对于新的未知攻击或者策略配置有误，防火<br>墙就无能为力了。</p></blockquote><blockquote><p>(3)从防火墙的软、硬件形式来分的话，防火墙可以分为<code>软件防火墙</code>、<code>硬件防火墙</code>及<code>芯片级防火墙</code>。</p></blockquote><blockquote><p>(4)包过滤型防火墙工作在OSI网络参考模型的<code>网络层</code>和<code>传输层</code>。</p></blockquote><blockquote><p>(5)第一代应用网关型防火墙的核心技术是<code>代理技术</code>。</p></blockquote><blockquote><p>(6)单一主机防火墙独立于其他网络设备，它位于<code>网络边界</code>。</p></blockquote><blockquote><p>(7)组织的雇员可以是要到外围区域或Internet 的内部用户、外部用户(如分支办事处工作人员)、远程用户或在家中办公的用户等，被称为内部防火墙的<code>完全信任用户</code>。</p></blockquote><blockquote><p>(8) <code>堡垒主机</code>是位于外围网络中的服务器，向内部和外部用户提供服务。</p></blockquote><blockquote><p>(9) <code>拒绝服务攻击</code>是利用TCP设计上的缺陷，通过特定方式发送大量的TCP请求，从而导致受攻击方CPU超负荷或内存不足的一种攻击方式。</p></blockquote><blockquote><p>(10)针对SYN Flood 攻击，防火墙通常有3种防护方式: <code>SYN网关</code>、被动式<code>SYN网关</code>和<code>SYN中继</code>。</p></blockquote><h1 id="第九章-1"><a href="#第九章-1" class="headerlink" title="第九章"></a>第九章</h1><blockquote><p>(1)系统盘保存有操作系统中的核心功能程序，如果被木马程序进行伪装替换，将给系统埋下安全隐患。所以，在权限方面，系统盘只赋予<code>Administrator</code>和<code>System</code>权限。</p></blockquote><blockquote><p>(2) Windows Server 2003在身份验证方面支持<code>智能卡</code>登录和<code>单点</code>登录。</p></blockquote><blockquote><p>(3)在UNIX操作系统中，ls 命令显示为:-rWxT-xr-x 1 foo staff 7734 Apr 05 17:07 demofile,则说明同组用户对该文件具有<code>读</code>和<code>执行</code>的访问权限。</p></blockquote><blockquote><p>(4)在Linux系统中，采用插入式验证模块(Pluggable Authentication Modules, PAM)<br>的机制，可以用来<code>动态的</code>改变<code>身份验证</code>的方法和要求，而不要求重新编译其他公用程序。这是因为PAM采用封闭包的方式，将所有与身份验证有关的逻辑全部隐藏在模块内。</p></blockquote><blockquote><p>(5)Web站点所面临的风险有<code>系统层面</code>的，<code>应用层面</code>、<code>网络层面</code>和<code>物理层面</code>。</p></blockquote><blockquote><p>(6)软件限制策略可以对<code>未知的</code>或<code>不信任的</code>的软件进行控制。</p></blockquote><h1 id="第十章-1"><a href="#第十章-1" class="headerlink" title="第十章"></a>第十章</h1><blockquote><p>(1) SQL Server 2016提供两种身份认证模式来保护对服务器访问的安全，它们分别是<code>Windows验证模式</code>和<code>混合模式</code>。</p></blockquote><blockquote><p>(2)数据库的保密性是在对用户的<code>认证与鉴别</code>、<code>存取控制</code>、<code>数据库加密</code>及推理控制等安全机制的控制下得以实现的。</p></blockquote><blockquote><p>(3)数据库中的事务应该具有4种属性: <code>原子性</code>、<code>一致性</code>、<code>隔离性</code>和持久性。</p></blockquote><blockquote><p>(4)网络数据库系统的体系结构分为两种类型: <code>主机-终端结构</code>和<code>分层结构</code>。</p></blockquote><blockquote><p>(5)访问控制策略、<code>数据库登录权限类</code>、<code>资源管理权限类</code>和<code>数据库管理员权限类</code>构成网络数据库访问控制模型。</p></blockquote><blockquote><p>(6)在SQL Server 2016中，可以为登录名配置具体的<code>表级权限</code>和<code>列级权限</code>。</p></blockquote><h1 id="问答题（10分×3）"><a href="#问答题（10分×3）" class="headerlink" title="问答题（10分×3）"></a><code>问答题（10分×3）</code></h1><blockquote><ul><li><code>什么是网络安全技术？什么是网络安全管理技术？</code><br>答：网络安全技术是指为解决网络安全问题进行有效监控和管理，保障数据及系统安全的技术手段；网络安全管理技术是保护网络安全的一种方法，是人们能够安全上网、绿色上网、健康上网的根本保证。</li><li><code>简述常用的网络安全关键技术的内容。</code></li></ul><p><img alt data-src="https://s2.ax1x.com/2019/12/26/lEPfN4.jpg" class="lazyload"></p><ul><li><code>画出网络安全通用模型，并进行说明。</code></li></ul><p><img alt data-src="https://s2.ax1x.com/2019/12/26/lEP5C9.jpg" class="lazyload"></p><p>​        <code>说明：</code>对网络信息进行安全处理，需要可信的第三方进行两个主体在报文传输中的身份认证。构建网络安全系统时，网络安全模型的基本任务主要有4个:选取一个秘密信息或报文;设计一个实现安全的转换算法;开发一个分发和共享秘密信息的方法;确定两个主体使用的网络协议，以便利用秘密算法与信息实现特定的安全服务。</p><ul><li><p><code>网络安全的实质和关键是网络信息安全吗？</code><br>答：网络安全的实质是保护信息系统和信息资源免受各种威胁、干扰和破坏，即保证信息的安全性。</p></li><li><p><code>入侵检测的基本功能是什么？</code><br>答:对网络流量的跟踪与分析功能:<br>对已知攻击特征的识别功能;<br>对异常行为的分析、统计与响应功能:<br>特征库的在线升级功能:<br>数据文件的完整性检验功能;<br>自定义特征的响应功能;<br>系统漏洞的预报警功能。</p></li><li><p><code>通常按端口号分布将端口号分为哪几部分？并简单说明。</code></p><p>答:按端口号分布可分为3段:</p><p><code>公认端口</code>(0~1023)， 又称常用端口，是为已经公认定义或为将要公认定义的软件保留的。这些端口紧密绑定一些服务且明确表示了某种服务协议，如80 端口表示HTTP。</p><p><code>注册端口</code>(1024~49151)， 又称保留端口，这些端口松散绑定一些服务。 </p><p><code>动态/私有端口</code>(49152~65535)。 理论上不应为服务器分配这些端口。</p></li><li><p><code>什么是统一威胁管理？</code></p><p>答：统一威胁管理，即将防病毒、入侵检测和防火墙安全设备划归统一威胁管理。</p></li><li><p><code>什么是异常入侵检测？什么是特征入侵检测？</code></p><p>异常检测(Anomaly Detection) 的假设是入侵者活动异常于正常主体的活动。根据这一理念建立主体正常活动的“ 活动简档”，将当前主体的活动状况与“活动简档”相比较，当违反其统计模型时，认为该活动可能是“入侵”行为。异常检测的难题在于如何建立“活动档”及如何设计统计模型，从而不把正常操作作为“入侵”或忽略真正的“入侵”行为。<br>特征检测是对己知的攻击或入侵的方式进行确定性的描述，形成相应的事件模式。当被审计的事件与已知的入侵事件模式相匹配时，即报警。在检测方法上与计算机病毒的检测方式类似。目前基于对包特征描述的模式匹配应用较为广泛。该方法的优点是误报少，局限是它只能发现已知的攻击，对未知的攻击无能为力，同时由于新的攻击方法不断产生、新漏洞不断发现，攻击特征库如果不能及时更新也将造成IDS漏报。</p></li><li><p><code>什么是防火墙？</code></p><p>答:防火墙一种用于加强网络之间访问控制、防止外部网络用户以非法手段通过外<br>部网络进入内部网络、访问内部网络资源，保护内部网络操作环境的特殊网络互连设备。</p></li><li><p><code>简述防火墙的分类及主要技术。</code></p><p>答:根据物理特性，防火墙分为两大类:硬件防火墙和软件防火墙</p><p>按过滤机制的演化历史划分为过滤防火墙、应用代理网关防火墙和状态检测防火墙3种类型</p><p>按处理能力可划分为百兆防火墙、千兆防火墙及万兆防火墙:按部署方式可划分为终端(单机)防火墙和网络防火墙。</p><p>防火墙的主要技术有包过滤技术、应用代理技术及状态检测技术。</p></li><li><p><code>SYN Flood攻击的原理是什么？</code></p><p>答: SYN Flood攻击是种很简单但又很有效的进攻方式，能够利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务。</p></li><li><p><code>防火墙如何阻止SYN Flood攻击？</code></p><p>答:针对SYN Flood攻击，防火墙通常有3种防护方式: SYN网关、被动式SYN网关和SYN中继。在SYN网关中，防火墙收到客户端的SYN包时，直接转发给服务器:服务器返还SYNACK包后，一方面将SYNACK包转发给客户端，另-方面以客户端的名义给服务器回送一个 ACK包，完成一个完整的 TCP三次握手过程，让服务器端由半连接状态进入连接状态。当客户端真正的ACK包到达时，有数据则转发给服务器，否则丢弃该包。在被动式SYN网关中，设置防火墙的SYN请求超时参数，让它远小于服务器的超时期限。防火墙负责转发客户端发往服务器的SYN包，包括服务器发往客户端的SYN/ACK包和客户端发往服务器的ACK包。如果客户端在防火墙计时器到期时还没有发送ACK包，防火墙将往服务器发送RST 包，以使服务器从队列中删去该半连接。由于防火墙超时参数远小于服务器的超时期限，因此也能有效防止SYN Flood 攻击。在SYN中继中，防火墙收到客户端的SYN包后，并不向服务器转发而是记录该状态信息，然后主动给客户端回送SYNACK包。如果收到客户端的ACK包，表明是正常访问，由防火墙向服务器发送SYN包并完成三次握手。这样由防火墙作为代理实现客户端和服务器端连接，可以完全过滤发往服务器的不可用连接。</p></li></ul></blockquote><h1 id="简述题（15分×2）"><a href="#简述题（15分×2）" class="headerlink" title="简述题（15分×2）"></a><code>简述题（15分×2）</code></h1><blockquote><p><code>简述RSA算法中密钥的产生，数据加密和解密的过程，并简单说明RSA算法安全性的原理。</code></p><p><img alt data-src="https://s2.ax1x.com/2019/12/26/lEiXLV.jpg" class="lazyload"></p><p><code>安全性的原理：</code>两大素数相乘在计算上很容易实现，但将该乘积分解为两个大素数因子的计算量则是相当巨大的，以至于在实际计算中不能实现。</p></blockquote><blockquote><p><code>简述密码破译方法和防止密码破译的措施。</code><br>密码破译方法：1.穷举搜索密钥攻击2.密码分析。P121<br>防止密码破译的措施：1.增强密码算法的安全性2.使用动态会话密钥3.定期更换会话密钥。</p></blockquote><blockquote><p><code>简述计算机病毒的特点有哪些。</code></p><ul><li>传播性</li><li>隐蔽性</li><li>潜伏性</li><li>触发及控制性</li><li>影响破坏性</li><li>多态及不可预见性</li></ul></blockquote><blockquote><p><code>如何清除计算机病毒。</code></p><ul><li>一般常见流行病毒：此种情况对计算机的危害较小，一般运行杀毒软件进行查杀即可。若可执行文件的病毒无法根除，可将其删除后重新安装。</li><li>系统文件破坏:多数系统文件被破坏将导致系统无法正常运行，破坏程序较大。若删除文件重新安装后仍未解决问题，则需要请专业计算机人员进行清除和数据恢复。在数据恢复前，要对重要的数据文件进行备份，当出现误杀时方便进行恢复。有些病毒，如“新时光脚本病毒”，运行时在内存中不可见，而系统则认为其是合法程序而加以保护，保证其继续运行，这就造成了病毒不能被清除。而在DOS下查杀， Windows 系统无法运行，所以病毒也就不可能运行，在这种环境下，可以将病毒彻底清除干净。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统复习第五章</title>
      <link href="/2019-12/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A005/"/>
      <url>/2019-12/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A005/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a><code>存储器管理</code></h1><h1 id="内存组成部分"><a href="#内存组成部分" class="headerlink" title="内存组成部分"></a>内存组成部分</h1><blockquote><ul><li>系统区</li><li>用户区</li></ul></blockquote><h1 id="存储管理的目的"><a href="#存储管理的目的" class="headerlink" title="存储管理的目的"></a>存储管理的目的</h1><p>存储管理要实现的目的是为用户提供方便、安全和充分大的存储空间</p><h1 id="存储管理的任务-功能"><a href="#存储管理的任务-功能" class="headerlink" title="存储管理的任务/功能"></a>存储管理的任务/功能</h1><blockquote><ul><li>地址转换<ul><li>逻辑地址</li><li>物理地址</li></ul></li><li>内存的分配和回收</li><li>内存的地址保护</li><li>内存的共享</li><li>内存的扩充</li></ul></blockquote><h1 id="存储管理方式的分类"><a href="#存储管理方式的分类" class="headerlink" title="存储管理方式的分类"></a>存储管理方式的分类</h1><p> <img alt="存储管理方式层次关系图" data-src="https://img-blog.csdnimg.cn/20191225165005995.png" class="lazyload"></p><h1 id="动态地址变换"><a href="#动态地址变换" class="headerlink" title="动态地址变换"></a>动态地址变换</h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统复习第四章</title>
      <link href="/2019-12/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A004/"/>
      <url>/2019-12/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A004/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="进程的同步与通信"><a href="#进程的同步与通信" class="headerlink" title="进程的同步与通信"></a><code>进程的同步与通信</code></h1><h1 id="进程间的联系"><a href="#进程间的联系" class="headerlink" title="进程间的联系"></a>进程间的联系</h1><blockquote><ol><li>资源共享关系</li><li>相互合作关系</li></ol></blockquote><h1 id="临界资源的含义"><a href="#临界资源的含义" class="headerlink" title="临界资源的含义"></a>临界资源的含义</h1><blockquote><p> 采取互斥的方式,实现共享的资源 ，一次只能供一个进程使用 </p></blockquote><h1 id="临界资源典型案例"><a href="#临界资源典型案例" class="headerlink" title="临界资源典型案例"></a>临界资源典型案例</h1><p> <img alt data-src="https://img-blog.csdnimg.cn/201912250946445.png" class="lazyload"> </p><h1 id="临界区的含义"><a href="#临界区的含义" class="headerlink" title="临界区的含义"></a>临界区的含义</h1><blockquote><p>每个进程中访问临界资源那段程序称为临界区</p></blockquote><h1 id="同步机制遵循原则"><a href="#同步机制遵循原则" class="headerlink" title="同步机制遵循原则"></a>同步机制遵循原则</h1><blockquote><p>为了实现进程互斥，设置同步机制来协调诸进程，但进程必须遵循下述4条准则：</p></blockquote><blockquote><ul><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ul></blockquote><h1 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h1><h2 id="记录型信号量机制"><a href="#记录型信号量机制" class="headerlink" title="记录型信号量机制"></a>记录型信号量机制</h2><blockquote><p>信号量除初始化外，仅能通过两个标准的原子操作<code>wait(s)</code>和<code>signal(s)</code>来访问，也称为<code>P、V</code>操作，这是两个<code>原子操作</code></p></blockquote><p><code>P、V操作</code>——执行时不可中断的，同时也是互斥的</p><blockquote><p>P–wait(s)</p><p>V–signal(s)</p></blockquote><blockquote><p>相应的，wait(s)和signal(s)操作可描述如下：</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">static</span> semaphore s)</span><span class="comment">//申请资源</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.value--;<span class="comment">//表示资源数目</span></span><br><span class="line">    <span class="keyword">if</span>(s.value&lt;<span class="number">0</span>)</span><br><span class="line">        block(s,L);<span class="comment">//自我阻塞</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">static</span> semaphore s)</span><span class="comment">//释放资源</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.value++;</span><br><span class="line">    <span class="keyword">if</span>(s.value&lt;=<span class="number">0</span>)</span><br><span class="line">        wakeup(s,L);<span class="comment">//唤醒进程访问临界资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>注意：wait()和signal()必须成对出现</code></p><p><code>缺少wait()导致系统混乱，不能保证对临界资源的互斥访问</code></p><p><code>缺少signal()将会使临界资源永远不被释放，导致等待该资源的进程不被唤醒</code></p></blockquote><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><code>看图写代码</code></p><p> <img alt data-src="https://img-blog.csdnimg.cn/2019122509481267.png" class="lazyload"> </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">semaphore a=b=c=d=e=f=g=<span class="number">0</span>;</span><br><span class="line">    cobegin&#123;</span><br><span class="line">        &#123;T1;signal(a);signal(b);&#125;<span class="comment">//T1用完后，释放资源，空闲资源供T2,T3可用</span></span><br><span class="line">        &#123;wait(a);T2;signal(c);signal(d);&#125;<span class="comment">//T2申请资源a，T2用完后，释放资源，空闲资源T4,T5可用</span></span><br><span class="line">        &#123;wait(b);T3;signal(e);&#125;<span class="comment">//T3申请资源b,T3用完后，释放资源e</span></span><br><span class="line">        &#123;wait(c);T4;signal(f);&#125;<span class="comment">//T4申请资源c,T4用完后，释放资源f</span></span><br><span class="line">        &#123;wait(d);T5;signal(g);&#125;<span class="comment">//T5申请资源d,T5用完后，释放资源g</span></span><br><span class="line">        &#123;wait(e);wait(f);wait(g);T6;&#125;<span class="comment">//T6使用资源必须在e,f,g都释放之后才可以使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><p><code>英文普及</code></p><blockquote><p>生产者——Producer</p><p>消费者——Consumer</p></blockquote><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">semaphore mutex=<span class="number">1</span>,empty=n,full=<span class="number">0</span>;</span><br><span class="line">item buffer[n];</span><br><span class="line"><span class="keyword">int</span> in=out=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">···</span><br><span class="line">        produce an item in nextp;</span><br><span class="line">        ···</span><br><span class="line">        wait(empty);<span class="comment">//申请放，请求空的区域，看是否能放</span></span><br><span class="line">        wait(mutex);<span class="comment">//看进程是否可申请到临界资源</span></span><br><span class="line">        buffer[in]=nextp;</span><br><span class="line">        in=(in+<span class="number">1</span>) mod n;</span><br><span class="line">        signal(mutex);<span class="comment">//释放临界资源</span></span><br><span class="line">        signal(full);<span class="comment">//放操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">···</span><br><span class="line">        produce an item in nextp;</span><br><span class="line">        ···</span><br><span class="line">        wait(full);<span class="comment">//申请取，请求满的区域，看是否能取</span></span><br><span class="line">        wait(mutex);<span class="comment">//看进程是否可申请到临界资源</span></span><br><span class="line">        nextc=buffer[out];</span><br><span class="line">        out=(out+<span class="number">1</span>) mod n;</span><br><span class="line">        signal(mutex);<span class="comment">//释放临界资源</span></span><br><span class="line">        signal(empty);<span class="comment">//取操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>生产者-消费者问题中应注意以下几点</code></p><blockquote><ul><li>wait(mutex)和signal(mutex)必须<code>成对出现</code></li><li>对资源信号量empty和full的wait和signal操作，同样需要<code>成对出现</code></li><li>先执行对资源信号量的wait操作，再执行对互斥信号量的wait操作，否则可能引起<code>死锁</code></li></ul></blockquote><blockquote><p><code>若缓冲池全空，消费者无法取，若全满，生产者无法放</code></p></blockquote><h1 id="死锁定义"><a href="#死锁定义" class="headerlink" title="死锁定义"></a>死锁定义</h1><blockquote><p>多个进程在执行过程中，因争夺被另一个进程占有且永远不会释放的资源的现象称为<code>死锁</code></p></blockquote><h1 id="死锁的例子"><a href="#死锁的例子" class="headerlink" title="死锁的例子"></a>死锁的例子</h1><p> <img alt data-src="https://i.loli.net/2019/12/24/ZPw4I9Ke5yC2qof.png" class="lazyload"></p><h1 id="产生死锁的原因"><a href="#产生死锁的原因" class="headerlink" title="产生死锁的原因"></a>产生死锁的原因</h1><blockquote><ul><li>竞争资源<ul><li>竞争可剥夺性资源<ul><li>进程优先权竞争处理机</li></ul></li><li>竞争非剥夺性资源<ul><li>进程资源环形链——<code>I/O设备共享时的死锁情况</code></li></ul></li><li>竞争临时性资源</li></ul></li><li>进程推进顺序不当</li></ul></blockquote><h1 id="环路等待情况-竞争非剥夺性资源"><a href="#环路等待情况-竞争非剥夺性资源" class="headerlink" title="环路等待情况(竞争非剥夺性资源)"></a>环路等待情况(<code>竞争非剥夺性资源</code>)</h1><p> <img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191225094527188.png" class="lazyload"> </p><blockquote><p>R1分配给P1，R2分配给了P2</p><p>P1请求着R2，P2请求着R1(<code>而R1在P1手里，未释放，R2在P2手里，未释放</code>)</p><p><code>因此形成一种环形链，进入死锁状态</code></p></blockquote><h1 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h1><blockquote><ul><li>互斥条件</li><li>请求和保持条件</li><li>不剥夺条件</li><li>环路等待条件</li></ul></blockquote><h1 id="解决死锁的基本方法"><a href="#解决死锁的基本方法" class="headerlink" title="解决死锁的基本方法"></a>解决死锁的基本方法</h1><blockquote><ul><li>预防死锁</li><li>避免死锁<ul><li>银行家算法</li></ul></li><li>监测死锁</li><li>解除死锁</li></ul></blockquote><h1 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h1><blockquote><p>具有代表性的<code>避免死锁</code>的算法是Dijkstra的银行家算法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马克思主义基本原理</title>
      <link href="/2019-12/22/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2019-12/22/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><blockquote><ul><li>马克思主义原理产生年代：19世纪40年代</li><li>最根本的世界观和方法论：辩证唯物主义和历史唯物主义</li><li>古代朴素唯物主义者的局限：把世界的本源归结为某种或几种具体的物质形态</li><li>从动物心理到人的意识，起决定作用的是生产劳动力</li><li>对立统一是事物发展的总特征</li><li>否定之否定规律揭示了事物发展的方向和道路</li><li>检验真理的标准：实践</li><li>物质资料的生产方式是生产力和生产关系</li><li>国体是国家的阶级属性</li><li>区分不变资本和可变资本的依据：根据生产资料和劳动力这两部分资本在剩余价值生产中所起的不同作用</li><li>共产主义的第一阶段：社会主义按需分配</li><li>否定之否定规律的作用：揭示了事物发展的方向和道路</li><li>货币转化为资本的前提是劳动力成为商品</li><li>人类社会发展的基本规律：生产力与生产关系矛盾运动的规律</li></ul></blockquote><h1 id="唯物论"><a href="#唯物论" class="headerlink" title="唯物论"></a>唯物论</h1><blockquote><p><strong>【简答】物质与意识的辩证关系？</strong></p><p>（1）物质决定意识</p><p>（2）意识对物质具有反作用</p><p>（3）主观能动性和客观规律性的统一</p><p>①尊重客观规律是正确发挥主观能动性的前提</p><p>②只有充分发挥主观能动性，才能正确认识和利用客观规律性</p><p><strong>意识的能动作用主要表现在哪些方面？</strong></p><p>（1）意识活动具有目的性和计划性</p><p>（2）意识活动具有创造性</p><p>（3）意识具有指导实践改造客观世界的作用</p><p>（4）意识具有调控人的行为和生理活动的作用</p></blockquote><h1 id="辩证法"><a href="#辩证法" class="headerlink" title="辩证法"></a>辩证法</h1><blockquote><p>辩证否定观的基本内容：</p><ol><li>否定是事物自我否定，是事物内部矛盾运动的结果</li><li>否定是事物发展的环节，是新旧事物的转变，是从旧质向新质的飞跃。</li><li>否定是新旧事物联系的环节，旧事物孕育产生新事物，新旧事物通过否定的环节相联系</li><li>辩证否定的实质是“扬弃”，新事物对旧事物批判继承，既客服消极因素又保留积极因素<br>作用：揭示了事物发展的方向和道路</li></ol><p>简述唯物辩证法的总特征：<br>联系和发展的观点是唯物辩证法的总特征，世界上万事万物都处于普遍联系中，普遍联系引起事物的运动发展。<br>联系</p><ol><li>联系具有客观性，坚持联系的客观性，就是在联系的观点上坚持唯物论，各事物都存在于与其它事物的联系之中，联系是事物所固有的属性。</li><li>联系具有普遍性 a. 事物内部的不同部分和要素间都是相互联系的<pre><code>b. 事物间处于一定联系中，不能孤立存在c. 整个世界是相互统一的整体</code></pre></li><li>联系具有多样性，事物间的不同联系构成了事物内部和事物之间的存在状态和发展趋势</li><li>联系据有条件性<br>a. 条件对事物的发展和人的活动，具有支持或制约作用<br>b. 条件是可以改变的，可以化不利条件为有利条件，推动事物的发展<br>c. 在改变和创造条件中，必须尊重客观事物的发展规律，不能违背事物的发展规律<br>发展的实质是新事物的产生和旧事物的灭亡，发展是前进的，上升的运动。</li></ol><p>什么是矛盾的斗争性、统一性、普遍性、特殊性：</p><ol><li>矛盾的统一属性又称同一性（有条件的，相对的），是指矛盾双方，相互依存，相互贯通的性质和趋势。<br>a. 矛盾的对立面相互依存，互为存在的前提，并处于同一个统一体之中。<br>b. 矛盾对立面在一定条件下可相互转化。</li><li>矛盾的对立属于又称斗争性（无条件的，绝对的），矛盾对立面相互排斥，相互分离的性质和趋势。</li></ol><p>矛盾的斗争性与同一性相互联结，相辅相成。斗争性寓于同一性之中，同一性通过斗争性体现。斗争性与同一性相结合，构成矛盾运动，推动着事物的变化发展。</p><ol start="3"><li>矛盾的普遍性（供性）是指矛盾存在于一切事物中，存在于一切事物发展过程的始终。</li><li>矛盾的特殊性（个性）是指各个具体的事物的矛盾、每一个矛盾的各个方面在发展的不同阶段上各有其特点。</li></ol><p>矛盾的特殊性与普遍性是辩证统一关系，任何事物的存在都是共性与个性的有机统一，共性寓于个性之中。</p><p>实践认识的辩证关系原理：</p><ol><li>实践决定认识，实践是认识的来源；认识的内容是在实践活动的基础上产生个发展的</li><li>实践是认识发展的动力，实践的需要推动认识的产生和发展</li><li>实践是认识的目的，人们通过实践获得认识，最终目的是为实践服务</li><li>实践是检验真理的唯一标准</li></ol><p>感性认识和理性认识的辩证关系原理：<br>感性认识和理性认识的辩证统一关系是在实践的基础上形成发展的，实践在其中起到的是媒介与验证的意义和作用。</p><ol><li>感性认识有待发展和深化为理性认识，理性认识是在感性认识基础上发展起来的高级认识形式，感性认识是认识的初级阶段，是对外部联系的认识，未深入到实物规律和本质的理性认识</li><li>感性认识是理性认识的基础和前提，理性认识依赖于感性认识，感性认识是认识过程的起点，是达到理性认识的必经阶段</li><li>感性认识和理性认识相互渗透、相互包含，二者没有绝对分明的界限</li></ol><p>真理的二重性关系及其现实意义：<br>任何真理都是绝对性和相对性的统一，二者相互联系、不可分割。</p><ol><li>绝对性：指真理主客观统一的确定性和发展的无限性<br>a. 任何真理都标志着主观与客观的符合，不依赖于人的意识，不以人的意识为转移。<br>b. 人能够正确认识无限发展的事物，这一点是无条件的、绝对的。</li><li>相对性：指人们在一定条件下对客观事物及其本质和发展规律的正确认识是有限度的、不完整的，任何真理都只能是主观对客观事物相对正确的反应。<br>a. 从客观世界的整体看，认识是有限度的，有待扩展的。<br>b. 任何真理都只是对客观对象的一定方面、一定层次、一定程度的正确认识，其深度是有限的。</li><li>真理的绝对性和相对性的关系<br>辩证统一<br>a. 相互依存，人们对客观事物的正确认识有一定的条件限制，因而是相对的有局限的；但在这一条件下它又是对客观对象的正确反映，因而又是绝对的、无条件的。<br>b. 相互包含，绝对性寓于相对性之中最，任何真理都只能存在于特定的历史条件下，是对客观世界一定程度的正确反映；相对性包含并表现绝对性，真理与谬误有绝对区别，在这一历史条件下，人们的认识达到了对组织世界发展事物的正确认识。</li></ol></blockquote><h1 id="也不知道是啥"><a href="#也不知道是啥" class="headerlink" title="也不知道是啥"></a>也不知道是啥</h1><blockquote><p>为什么说物质资料的生产方式是社会发展的决定力量<br>（1）物质生产活动及生产方式是人类社会赖以存在和发展的基础，是人类其他一切活动的首要前提<br>（2）物质生产活动及生产方式决定着社会的结构、性质和面貌，制约着人们的政治、经济等全部社会生活<br>（3）物质生产活动及生产方式的变化发展决定整个社会历史的变化发展，决定社会形态从低级向高级的更替和发展</p><p>【简答】简述社会意识相对独立性的含义及其主要表现<br>（1）社会意识的相对独立性是指：社会意识从根本上受到社会存在决定的同时，还具有自己特有的发展形势和规律<br>（2）主要表现：<br>①社会意识与社会存在发展的不完全同步性和不平衡性<br>②社会意识内部各种形式之间的相互影响及各自具有的历史继承性<br>③社会意识对社会存在能动的反作用</p><p>生产力和生产关系，经济基础与上层建筑之间的矛盾律？<br>（1）生产力决定生产关系，生产关系对生产力具有能动的反作用<br>（2）经济基础决定上层建筑，上层建筑对经济基础具有反作用</p><p>科学技术在社会发展中的作用？<br>科学技术是社会发展的重要动力。<br>（1）对生产方式产生了深刻的影响：①改变了社会生产力的构成要素；②改变了人们的劳动形式；③改变了社会经济结构，特别是产业结构<br>（2）对生活方式产生了巨大影响：①科技将人们带入信息时代，要求人们要不断学习；②现代交通，通信手段为交往提供方便；③劳动生产率提高使人们拥有更多空闲时间<br>（3）促进思维方式的变革；新的科学理论和技术手段通过影响思维主体、思维客体和思维工具。</p><p>价值规律内容、表现及其作用<br>内容：商品的价值量有生产商品的社会必要劳动时间决定，商品交换以价值量为基础，按照等价交换的原则进行。<br>表现：商品的价格围绕商品的价值自发波动<br>作用：①自发地调节生产资料和劳动力在社会生产部门之间的分配比例<br>            ②自发地刺激社会生产力的发展<br>            ③自发地调节社会收入的分配</p><p>【简答】剩余价值理论的意义<br>（1）揭露了资本主义生产关系的剥削本质<br>（2）阐明了资产阶级与无产阶级之间阶级斗争的经济根源（3）指出了无产阶级革命的历史必然性。<br>（4）是马克思主义经济理论的基石，是无产阶级反对资产阶级、揭示资本主义制度剥削本质的锐利武器。<br>（5）由于唯物史观和剩余价值的发现，社会主义由空想变为科学。</p><p>垄断资本主义条件下，竞争有哪些新特点？<br>（1）在竞争目的上，自由竞争主要是为了获得更多的利润，垄断条件下的竞争是为了获取高额垄断利润<br>（2）在竞争手段上，自由竞争主要运用经济手段，垄断条件下的竞争有经济和非经济手段更加复杂<br>（3）在竞争范围上，自由竞争主要在经济领域，垄断条件下的竞争扩大到经济领域之外<br>总而言之，垄断条件下的竞争规模大、时间长、手段残忍、具有更大的破坏性</p><p>垄断和竞争之间的关系<br>垄断在自由竞争中形成，作为自由竞争的对立面产生。表现在：①垄断不能消除竞争；②垄断必须通过竞争来维持；③社会生产复杂多样，任何垄断组织都不可能把包罗万象的社会生产都包下来</p><p>经济全球化的表现？<br>（1）国际分工进一步深化；国际水平分工逐渐取代国际垂直分工。<br>（2）贸易全球化；商品和劳务在全球范围内的自由流动<br>（3）金融全球化；世界各地在金融业务、金融政策等方面相互协调、相互渗透、相互竞争。<br>（4）企业生产经营全球化；跨国公司在全球范围内建立分支机构。</p><p>【简答】第二次世界大战后资本主义变化的新特点？<br>（1）生产资料所有制的变化。国家资本所有制形成并发挥重要作用，法人资本所有制崛起并成为居主导地位的资本所有制形式。<br>（2）劳资关系和分配关系的变化。采用激励制度，建立社会福利制度<br>（3）社会阶层和阶级结构的变化。股票导致资本家地位和作用发生变化；高级职业经理成为大公司经营活动的实际控制者；知识型和服务型劳动者的数量不断增加<br>（4）经济调节机制和经济危机形态的变化。国家对经济进行全面干预<br>（5）政治制度。多元化趋势，公民权利有所扩大</p><p>空想社会主义的历史局限性？<br>它没有指出真正的出路，具体表现在：<br>①未阐明资本主义制度下雇佣奴隶制的本质<br>②未发现资本主义发展的规律<br>③未找到能够成为新社会的创造者的社会力量</p><p>为什么社会主义能从空想到科学？<br>（1）无产阶级队伍的壮大为社会主义从空想到科学提供了社会条件和客观条件<br>（2）唯物史观和剩余价值学说的创立为之奠定了理论基础<br>①唯物史观深刻揭示了人类发展的一般规律，揭示了人民群众的历史主体作用，克服了空想社会主义者不懂历史规律的根本缺陷<br>②剩余价值学说深刻揭示了资本家剥削工人的秘密，揭示了无产阶级与资产阶级利益的根本对立，使人们找到了通往社会主义新社会的途径<br>（3）基于以上条件，马克思和恩格斯在揭示人类社会发展的一般规律和资本主义发展的特殊规律的基础上，科学论证了社会主义代替资本主义的历史必然性，创立了科学社会主义学说，从根本上超越了空想社会主义，实现了社会主义从空想到科学的伟大飞跃</p><p>试述真理的相对性和绝对性相统一的原理，并用以说明我们在社会主义建设中必须坚定不移走马克思主义的原因？<br>（1）原理：<br>①绝对性：指真理主客观统一的确定性和发展的无限性。<br>②相对性：指人们在一定条件下对客观事物及其本质和发展规律的正确认识是有限度的、不完整的，任何真理都只能是主观对客观事物相对正确的反应。</p><p>③相对性和绝对性辩证统一，人们对客观事物的正确认识有一定的条件限制，因而是相对的有局限的；但在这一条件下它又是对客观对象的正确反映，因而又是绝对的、无条件的。 绝对性寓于相对性之中最，任何真理都只能存在于特定的历史条件下，是对客观世界一定程度的正确反映；相对性包含并表现绝对性，真理与谬误有绝对区别，在这一历史条件下，人们的认识达到了对组织世界发展事物的正确认识。</p><p>（2）原因：马克思主义作为客观真理，是绝对性和相对性的统一，它正确反映了人类社会的发展规律，因而具有绝对性。习近平强调:“马克思主义就是我们共产党人的‘真经’，‘真经’没念好，总想着‘西天取经’，就要贻误大事!不了解、不熟悉马克思主义基本原理，就不可能真正了解和掌握中国特色社会主义理论体系。”但马克思主义经典作家并没有穷尽真理，而是不断为寻求真理和发展真理开辟道路，马克思主义并没有穷尽对一切事物及其规律的认识，仍需要随着社会实践的发展而发展，因而又具有相对性。马克思主义真理的绝对性要求我们必须坚持以马克思主义为指导思想，马克思主义真理的相对性要求我们又必须实践中丰富和发展马克思主义。真理源于实践又推动实践的发展，因此我们要在社会主义建设中坚持发展马克思主义，不断丰富其内涵，更好地推进社会主义建设。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马克思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统复习第三章</title>
      <link href="/2019-12/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A003/"/>
      <url>/2019-12/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A003/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="进程与进程管理"><a href="#进程与进程管理" class="headerlink" title="进程与进程管理"></a><code>进程与进程管理</code></h1><h1 id="前驱图的定义"><a href="#前驱图的定义" class="headerlink" title="前驱图的定义"></a>前驱图的定义</h1><blockquote><p> 用来描述程序（或进程）之间先后执行顺序的有向无环图  <code>简称DAG</code></p></blockquote><p><code>注意：</code></p><blockquote><ul><li>前驱图中，没有前驱的节点称为初始结点，没有后继的节点称为终止结点</li><li>前驱图中不能存在环</li></ul></blockquote><h1 id="程序顺序执行的特征"><a href="#程序顺序执行的特征" class="headerlink" title="程序顺序执行的特征"></a>程序顺序执行的特征</h1><blockquote><ul><li>程序执行的顺序性</li><li>程序执行的封闭性</li><li>程序执行结果的确定性</li><li>程序结果的可再现性</li></ul></blockquote><h1 id="程序并发执行的特征"><a href="#程序并发执行的特征" class="headerlink" title="程序并发执行的特征"></a>程序并发执行的特征</h1><blockquote><ul><li>程序执行的间断性</li><li>程序执行失去封闭性</li><li>程序执行结果的不可再现性</li></ul></blockquote><h1 id="对比顺序执行与并发执行区别"><a href="#对比顺序执行与并发执行区别" class="headerlink" title="对比顺序执行与并发执行区别"></a>对比顺序执行与并发执行区别</h1><blockquote><ul><li>顺序执行拥有一定顺序，而并发没有，程序执行期间可中途间断</li><li>顺序执行具有封闭性，执行结果不受外部影响，而并发执行没有封闭性</li><li>由于并发执行失去了封闭性 ，也就失去了可再现性，而顺序执行拥有可再现性</li></ul></blockquote><h1 id="进程是啥"><a href="#进程是啥" class="headerlink" title="进程是啥"></a>进程是啥</h1><blockquote><p> <code>任意选一个自己方便理解好记的</code></p></blockquote><blockquote><ul><li><code>进程（Process）</code>是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。——百度</li><li>行为的一个规则称为程序，程序在处理机上执行时所发生的活动称为<code>进程</code>。——Dijkstra</li><li><code>进程</code>是可以和别的计算并发执行的计算。——Madinick and Donowan</li><li><code>进程</code>是一个程序及其数据在处理机上顺序执行时发生的活动。——A.C.Shaw</li><li><code>进程</code>是程序在一个数据集合上的运行过程，是系统进行资源分配和调度的一个独立单位。——Peter Denning</li><li><code>进程</code>是具有独立功能的可并发执行的运行过程，是系统进行资源分配和调度的独立单位。——操作系统(第四版)</li></ul></blockquote><h1 id="进程的功能"><a href="#进程的功能" class="headerlink" title="进程的功能"></a>进程的功能</h1><blockquote><ul><li>资源分配</li><li>调度</li></ul></blockquote><h1 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h1><blockquote><ul><li>动态性——其动态表现为：<code>由调度而执行，得不到资源而暂停执行，以及撤销而消亡。</code></li><li>并发性</li><li>独立性</li><li>异步性</li><li>结构特征<ul><li><code>进程映像</code>/<code>进程实体</code>的组成<ul><li>程序段</li><li>数据段</li><li>进程控制块</li></ul></li></ul></li></ul></blockquote><h1 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h1><blockquote><ul><li>就绪</li><li>执行</li><li>阻塞</li></ul></blockquote><blockquote><p><code>执行中的程序</code></p><p><code>主动排队&gt;&gt;阻塞</code></p><p><code>被动排队&gt;&gt;就绪</code></p></blockquote><h2 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h2><blockquote><ul><li>就绪&gt;&gt;执行    (<code>处于就绪的进程分配到资源后</code>)</li><li>执行&gt;&gt;阻塞    (<code>执行的进程请求的临界资源正被其他进程访问</code>)</li><li>执行&gt;&gt;就绪    (<code>被优先级高的进程抢占了资源</code>)</li><li>阻塞&gt;&gt;就绪    (<code>等待等待</code>)</li></ul></blockquote><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a><code>图示</code></h2><p> <img alt data-src="https://img-blog.csdnimg.cn/20191224164419670.png" class="lazyload"> </p><h1 id="程序、进程、线程区别与联系"><a href="#程序、进程、线程区别与联系" class="headerlink" title="程序、进程、线程区别与联系"></a>程序、进程、线程区别与联系</h1><h2 id="进程与程序的区别与联系"><a href="#进程与程序的区别与联系" class="headerlink" title="进程与程序的区别与联系"></a>进程与程序的区别与联系</h2><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><blockquote><p>进程是把程序作为它的运行实体，没有程序，也就没有进程</p><p>进程由程序、数据和进程控制块3部分组成</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote><p>程序是静态的，进程是动态的</p><p>程序可以长期保存，而进程有生命周期，是临时的</p><p>进程是系统进行资源分配和调度的一个独立单位；而程序不是</p></blockquote><h2 id="线程与进程的区别与联系"><a href="#线程与进程的区别与联系" class="headerlink" title="线程与进程的区别与联系"></a>线程与进程的区别与联系</h2><h3 id="联系-1"><a href="#联系-1" class="headerlink" title="联系"></a>联系</h3><blockquote><ul><li><p>进程和线程都是一个时间段的描述，是CPU工作时间段的描述</p></li><li><p>进程和线程都是由操作系统所体会的程序运行的基本单元 </p></li></ul></blockquote><h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><blockquote><ul><li>进程有独立的地址空间 ，线程有自己的PCB，没有独立的地址空间</li></ul></blockquote><h1 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h1><blockquote><ul><li><code>PCB——进程控制块</code></li><li><code>TCB——线程控制块</code></li></ul></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>进程控制块PCB是进程实体的一部分，是操作系统中最重要的数据结构。</p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>对进程的控制与管理</p></blockquote><h2 id="作用的过程"><a href="#作用的过程" class="headerlink" title="作用的过程"></a>作用的过程</h2><blockquote><p>系统创建一个新进程时就为它建立了一个进程控制块PCB；进程结束时又回收其PCB，进程也随之消亡。</p><p><code>也可总结为</code></p><ul><li><p>创建新进程&gt;&gt;创建PCB</p></li><li><p>进程结束&gt;&gt;回收PCB</p></li></ul></blockquote><h1 id="进程控制块中的信息"><a href="#进程控制块中的信息" class="headerlink" title="进程控制块中的信息"></a>进程控制块中的信息</h1><blockquote><ul><li>进程标识符的信息<ul><li>外部标识符</li><li>内部标识符</li></ul></li><li>处理机状态信息<ul><li>通用寄存器</li><li>指令计数器</li><li>程序状态字PSW</li><li>用户栈指针</li></ul></li><li>进程调度信息<ul><li>进程状态</li><li>进程优先级</li><li>进程调度所需的其他信息</li><li>事件</li></ul></li><li>进程控制信息<ul><li>程序和数据的地址</li><li>进程同步和通信机制</li><li>资源清单</li><li>链接指针</li></ul></li></ul></blockquote><h1 id="操作系统的内核"><a href="#操作系统的内核" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h1><blockquote><p>操作系统内核是指大多数操作系统的核心部分</p></blockquote><h1 id="操作系统内核的核心功能"><a href="#操作系统内核的核心功能" class="headerlink" title="操作系统内核的核心功能"></a>操作系统内核的核心功能</h1><blockquote><ul><li>中断处理</li><li>进程管理<ul><li>进程的建立和撤销</li><li>进程状态的转换</li><li>进程调度</li><li>控制进程的并发执行</li></ul></li><li>资源管理中的基本操作</li></ul></blockquote><h1 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h1><p>创建原语 <code>create()</code></p><p><code>记住一句：子死父不一定死，父死子必死</code></p><h2 id="引起创建进程的事件"><a href="#引起创建进程的事件" class="headerlink" title="引起创建进程的事件"></a>引起创建进程的事件</h2><blockquote><ul><li>用户登录</li><li>作业调度</li><li>提供服务</li><li>应用请求</li></ul></blockquote><h2 id="进程创建的过程"><a href="#进程创建的过程" class="headerlink" title="进程创建的过程"></a>进程创建的过程</h2><blockquote><ol><li>申请空白进程控制块</li><li>为新进程分配资源</li><li>初始化进程控制块</li><li>将新进程插入就绪队列</li></ol></blockquote><h1 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h1><p>终止原语 <code>destroy()</code></p><h2 id="引进进程终止的事件"><a href="#引进进程终止的事件" class="headerlink" title="引进进程终止的事件"></a>引进进程终止的事件</h2><blockquote><ul><li>正常结束</li><li>异常结束</li><li>外界干预</li></ul></blockquote><h2 id="进程终止过程"><a href="#进程终止过程" class="headerlink" title="进程终止过程"></a>进程终止过程</h2><blockquote><ol><li>根据被终止进程的标识符从进程控制块PCB集合中检索出该进程的PCB，从中读出该进程的状态</li><li>若被终止进程正处于执行状态，应立即终止该进程的执行并设置调度标志为真，用于指示该进程被终止后应重新进行调度，选择一新进程，把处理机分配给它</li><li>若该进程还有子孙进程，还应将其所有子孙进程予以终止，以防它们成为不可控的</li><li>将该进程所拥有的全部资源或者归还其父进程或者归还给系统</li><li>将被终止进程的PCB从所在队列中移除，等待其他程序来搜集信息</li></ol></blockquote><p><code>简述</code></p><blockquote><ol><li>从标识符中读出当前进程的状态</li><li>若处于执行，则终止该进程，将处理机资源分配给其他新进程</li><li>若进程包含子孙进程，则终止所有子孙进程</li><li>将该进程所有资源释放回收</li><li>将该进程的PCB回收</li></ol></blockquote><h1 id="进程的调度"><a href="#进程的调度" class="headerlink" title="进程的调度"></a>进程的调度</h1><blockquote><ul><li><code>高级调度</code>(作业调度)——从外存接纳一个作业，为它创建进程且分配必要的资源，并挂到就绪队列上</li><li><code>低级调度</code>(进程调度)——决定就绪队列哪个进程将获得处理机资源</li><li>中级调度</li></ul></blockquote><h1 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h1><blockquote><ul><li>非剥夺方式<ul><li><code>优点：</code>简单，系统开销小</li><li><code>缺点：</code>短进程周转时间长，紧急任务无法立即投入运行</li></ul></li><li>剥夺方式<ul><li>剥夺原则<ul><li>优先权原则</li><li>短进程优先原则</li><li>时间片原则</li></ul></li></ul></li></ul></blockquote><h1 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h1><blockquote><ul><li>先进先出算法</li><li>短作业优先调度算法(<code>最短处理机运行期优先调度算法</code>)</li></ul></blockquote><blockquote><p><strong><code>Tn+1=αtn+(1-α)Tn</code></strong></p><p><code>α</code>用于预测值，通常在0.5左右</p><p><code>tn</code>是第n个实际的处理机执行期</p><p><code>Tn</code>是其预测值</p></blockquote><h1 id="线程的定义"><a href="#线程的定义" class="headerlink" title="线程的定义"></a>线程的定义</h1><blockquote><p>引入线程的操作系统中，线程是进程的一个实体，是被系统独立调度和分派的基本单位</p></blockquote><h1 id="引入线程的目的"><a href="#引入线程的目的" class="headerlink" title="引入线程的目的"></a>引入线程的目的</h1><blockquote><p>为了减少程序并发执行时所付出的时空开销，使操作系统具有更好的并发性</p></blockquote><h1 id="引入线程的好处"><a href="#引入线程的好处" class="headerlink" title="引入线程的好处"></a>引入线程的好处</h1><blockquote><ul><li><p>创建与终止一个线程花费时间少</p></li><li><p>线程之间切换花费时间少</p></li><li><p>同一进程内线程共享内存与文件，无须调用系统内核</p></li><li><p>线程能够独立执行</p></li></ul></blockquote><h1 id="线程与进程的比较"><a href="#线程与进程的比较" class="headerlink" title="线程与进程的比较"></a>线程与进程的比较</h1><blockquote><ul><li>调度——<code>把线程作为调度和分配的基本单位</code></li><li>并发性——<code>使系统具有更好的并发性，从而更加高效地使用系统资源和提高系统吞吐量</code></li><li>拥有资源——<code>进程可以拥有独立资源，线程是共享资源</code></li><li>系统开销——<code>线程的切换、同步和通信都无须操作系统内核的干预</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统复习第二章</title>
      <link href="/2019-12/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A002/"/>
      <url>/2019-12/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A002/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="操作系统的硬件环境"><a href="#操作系统的硬件环境" class="headerlink" title="操作系统的硬件环境"></a><code>操作系统的硬件环境</code></h1><h1 id="处理机的基本构成"><a href="#处理机的基本构成" class="headerlink" title="处理机的基本构成"></a>处理机的基本构成</h1><blockquote><ul><li>运算器</li><li>控制器</li><li>寄存器</li><li>高速缓存</li></ul></blockquote><h1 id="处理机的状态"><a href="#处理机的状态" class="headerlink" title="处理机的状态"></a>处理机的状态</h1><blockquote><ul><li>管态(<code>特权态</code>、<code>系统态</code>)—指操作系统管理程序运行时的状态</li><li>目态(<code>普通态</code>、<code>用户态</code>)—指用户程序运行时的状态</li></ul></blockquote><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><blockquote><ul><li>特权指令—<code>操作系统使用</code></li><li>非特权指令—<code>用户使用</code></li></ul></blockquote><h1 id="存储器类型"><a href="#存储器类型" class="headerlink" title="存储器类型"></a>存储器类型</h1><blockquote><ul><li>随机访问存储器——RAM</li><li>只读存储器——ROM<ul><li>可编程的只读存储器——PROM</li><li>电可编程只读存储器——EPROM</li><li>电可擦除存储器——EEPROM</li></ul></li></ul></blockquote><h1 id="存储器金字塔"><a href="#存储器金字塔" class="headerlink" title="存储器金字塔"></a>存储器金字塔</h1><blockquote><p>越往上速度越快</p></blockquote><p><img alt data-src="https://s2.ax1x.com/2019/12/21/Qva1aV.png" class="lazyload"></p><blockquote><p>Cache高速缓冲存储器</p><ul><li>L1—一级</li><li>L2—二级</li><li>L3—三级</li></ul></blockquote><h1 id="存储分块"><a href="#存储分块" class="headerlink" title="存储分块"></a>存储分块</h1><blockquote><p>存储最小单位称为<code>二进制位</code></p><p>1B=8b</p><p>1KB=1024B</p><p>1MB=1024KB</p><p>1GB=1024MB</p><p>1TB=1024GB</p><p>1字=2字节</p><p>4字节=1双字</p></blockquote><h1 id="中断处理技术"><a href="#中断处理技术" class="headerlink" title="中断处理技术"></a>中断处理技术</h1><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><blockquote><p>暂时停止当前操作，转做其他，中断当前程序，完成其他工作后再恢复</p></blockquote><h2 id="硬件中断"><a href="#硬件中断" class="headerlink" title="硬件中断"></a>硬件中断</h2><blockquote><ul><li><em>可屏蔽中断</em> </li><li><em>非可屏蔽中断</em> </li><li><em>处理器间中断</em> </li><li><em>伪中断</em> </li></ul></blockquote><h1 id="硬件中断过程"><a href="#硬件中断过程" class="headerlink" title="硬件中断过程"></a>硬件中断过程</h1><blockquote><ol><li>硬件设备产生一个中断</li><li>处理机结束当前指令的执行</li><li>处理机发送中断应答信号</li><li>处理机将PC与PSW压入栈</li><li>根据中断设置加载新的PC</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统复习第一章</title>
      <link href="/2019-12/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A001/"/>
      <url>/2019-12/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A001/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="操作系统的引论"><a href="#操作系统的引论" class="headerlink" title="操作系统的引论"></a><code>操作系统的引论</code></h1><h1 id="操作系统的定义"><a href="#操作系统的定义" class="headerlink" title="操作系统的定义"></a>操作系统的定义</h1><p>操作系统是计算机系统中的<code>系统软件</code>，是能够有效地<code>组织和管理</code>计算机系统中的<code>硬件</code>和<code>软件</code>资源，合理地组织<code>计算机工作流程</code>，控制程序的执行，并向用户提供各种<code>服务功能</code>，使得用户能够方便地使用计算机，使整个计算机系统能高效运行的一组程序模块的<code>集合</code></p><h1 id="操作系统的特点"><a href="#操作系统的特点" class="headerlink" title="操作系统的特点"></a>操作系统的特点</h1><blockquote><ul><li>有效</li><li>合理</li><li>方便</li></ul></blockquote><h1 id="操作系统的目标"><a href="#操作系统的目标" class="headerlink" title="操作系统的目标"></a>操作系统的目标</h1><blockquote><ul><li>方便性</li><li>有效性</li><li>可扩充性</li><li>开放性</li></ul></blockquote><h1 id="单道批处理操作系统的特征"><a href="#单道批处理操作系统的特征" class="headerlink" title="单道批处理操作系统的特征"></a>单道批处理操作系统的特征</h1><blockquote><ul><li>自动性</li><li>顺序性</li><li>单道性</li></ul></blockquote><blockquote><p>单道批处理系统是最早出现的一种操作系统</p></blockquote><h1 id="多道批处理操作系统好处"><a href="#多道批处理操作系统好处" class="headerlink" title="多道批处理操作系统好处"></a>多道批处理操作系统好处</h1><blockquote><ul><li>提高处理机的利用率</li><li>提高内存和I/O设备利用率</li><li>增加系统吞吐量</li></ul></blockquote><h1 id="多道批处理系统的特征"><a href="#多道批处理系统的特征" class="headerlink" title="多道批处理系统的特征"></a>多道批处理系统的特征</h1><blockquote><ul><li>多道性</li><li>无序性</li><li>调度性 <ul><li>作业调度</li><li>进程调度</li></ul></li></ul></blockquote><h1 id="多道批处理系统的优点-缺点"><a href="#多道批处理系统的优点-缺点" class="headerlink" title="多道批处理系统的优点/缺点"></a>多道批处理系统的优点/缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a><code>优点</code></h2><blockquote><ul><li>资源利用率高</li><li>系统吞吐量大</li></ul></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><code>缺点</code></h2><blockquote><ul><li>平均周转时间长</li><li>无交互能力</li></ul></blockquote><h1 id="分时系统的表现"><a href="#分时系统的表现" class="headerlink" title="分时系统的表现"></a>分时系统的表现</h1><blockquote><ul><li>人机交互</li><li>共享主机</li><li>便于用户上机</li></ul></blockquote><h1 id="分时系统的特征"><a href="#分时系统的特征" class="headerlink" title="分时系统的特征"></a>分时系统的特征</h1><blockquote><ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li></ul></blockquote><h1 id="实时系统的表现"><a href="#实时系统的表现" class="headerlink" title="实时系统的表现"></a>实时系统的表现</h1><blockquote><ul><li>实时控制</li><li>实时信息处理</li></ul></blockquote><h1 id="实时系统的特征"><a href="#实时系统的特征" class="headerlink" title="实时系统的特征"></a>实时系统的特征</h1><blockquote><ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li><li>可靠性</li></ul></blockquote><h1 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h1><h2 id="计算机网络的类型"><a href="#计算机网络的类型" class="headerlink" title="计算机网络的类型"></a>计算机网络的类型</h2><h3 id="网络拓扑结构分类"><a href="#网络拓扑结构分类" class="headerlink" title="网络拓扑结构分类"></a>网络拓扑结构分类</h3><blockquote><ul><li>星形网络</li><li>树形网络</li><li>总线型网络</li><li>环形网络</li><li>网状型网络</li></ul></blockquote><h3 id="网络地理范围分类"><a href="#网络地理范围分类" class="headerlink" title="网络地理范围分类"></a>网络地理范围分类</h3><blockquote><ul><li>WAN——广域网</li><li>LAN——局域网</li><li>MAN——城域网</li></ul></blockquote><h1 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h1><h2 id="处理机管理"><a href="#处理机管理" class="headerlink" title="处理机管理"></a>处理机管理</h2><blockquote><ul><li>进程控制<ul><li>创建进程</li><li>分配资源</li><li>撤销进程以及回收资源</li></ul></li><li>进程同步<ul><li>进程互斥方式</li><li>进程同步方式</li></ul></li><li>进程通信</li><li>进程调度</li></ul></blockquote><blockquote><p><code>作业调度&gt;&gt;写。进程调度&gt;&gt;读</code></p></blockquote><h2 id="存储器管理"><a href="#存储器管理" class="headerlink" title="存储器管理"></a>存储器管理</h2><blockquote><ul><li>内存分配<ul><li>静态分配—<code>内存空间装入时已经确定，无法申请新空间，也无法移动</code></li><li>动态分配—<code>内存空间装入时确定，但可额外申请附加空间，允许移动</code></li></ul></li><li>内存保护</li><li>地址映射</li><li>内存扩充</li></ul></blockquote><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h1 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h1><blockquote><ul><li>并发</li><li>共享</li><li>虚拟</li><li>异步性</li></ul></blockquote><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ol><li>什么是操作系统？操作系统追求的主要目标是什么？</li></ol><blockquote><p>操作系统是计算机系统中的<code>系统软件</code>，是能够有效地组织和管理计算机系统中的<code>硬件</code>和<code>软件资源</code>，合理地组织计算机工作流程，控制程序的执行，并向用户<code>提供各种服务功能</code>，使得用户能够方便地使用计算机，是整个计算机系统能高效运行的<code>一组程序模块的集合</code>。</p><p>操作系统的目标是：方便性、有效性、可扩充性、开放性</p></blockquote><ol start="2"><li>在用户程序与计算机硬件之间，操作系统可以分为哪几个模块？</li></ol><blockquote><p>可分为系统软件、支撑软件、应用软件</p></blockquote><ol start="3"><li>操作系统分成哪几类？</li></ol><blockquote><p>分为批处理操作系统、分时系统、实时系统、网络操作系统</p></blockquote><ol start="4"><li>从资源管理观点看，操作系统具有哪些功能？</li></ol><blockquote><ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li><li>用户接口</li></ul></blockquote><ol start="5"><li>什么是批处理系统？它可分为哪两种？</li></ol><blockquote><p>批处理系统就是可以成批处理一些程序的系统。</p><p>分为单道批处理和多道批处理</p></blockquote><ol start="6"><li>什么是多道程序系统？其主要特点是什么？</li></ol><blockquote><p>多道程序系统是控制多道程序同时运行的程序系统。</p><p>特点是：多道性、无序性、调度性</p></blockquote><ol start="7"><li>简述操作系统的特征</li></ol><blockquote><ul><li>有效</li><li>合理</li><li>方便</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16进制转8进制问题</title>
      <link href="/2019-12/21/%E7%AE%97%E6%B3%95/16%E8%BF%9B%E5%88%B6%E8%BD%AC8%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2019-12/21/%E7%AE%97%E6%B3%95/16%E8%BF%9B%E5%88%B6%E8%BD%AC8%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="16进制数转换为8进制数"><a href="#16进制数转换为8进制数" class="headerlink" title="16进制数转换为8进制数"></a>16进制数转换为8进制数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>　　给定n个十六进制正整数，输出它们对应的八进制数。</p><p><code>输入格式</code><br>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>　　接下来n行，每行一个由0<del>9、大写字母A</del>F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p><p><code>输出格式</code><br>　　输出n行，每行为输入对应的八进制正整数。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>将16进制逐位转换为4位2进制，然后再3位一组，转换为8进制数<br>注意：如果字符串的截取与拼接以及采用合适的符合题意的方式输出</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><code>完整代码</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;//用于实现string &gt;&gt; int </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;//数学函数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首位填充0元素 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">MakeUp</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> zero;</span><br><span class="line"><span class="keyword">int</span> len=str.length();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">if</span>(len&lt;num)&#123;</span><br><span class="line">n=num-len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">zero+=<span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">return</span> zero+str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2进制转8进制 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BitToOct</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> oct;<span class="comment">//8进制字符串接收返回值 </span></span><br><span class="line"><span class="built_in">string</span> new_oct;</span><br><span class="line"><span class="built_in">string</span> bit;<span class="comment">//存储截取的3位2进制字符串</span></span><br><span class="line"><span class="built_in">stringstream</span> ss;<span class="comment">//采用文件流将string 与 int 相互转换</span></span><br><span class="line"><span class="keyword">while</span>(str.length()!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//判断是否够3位</span></span><br><span class="line"><span class="keyword">if</span>(str.length()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">str=MakeUp(str,<span class="number">3</span>);<span class="comment">//补0，位数是3位</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,a;</span><br><span class="line"><span class="comment">//按权值相加，得到8进制数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="built_in">stringstream</span> s1;</span><br><span class="line">s1&lt;&lt;str[i]; </span><br><span class="line">s1&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">sum+=<span class="built_in">pow</span>(<span class="number">2.0</span>,<span class="number">2</span>-i);</span><br><span class="line">&#125;</span><br><span class="line">str=<span class="string">"\0"</span>;<span class="comment">//字符串清空 </span></span><br><span class="line">ss&lt;&lt;sum;</span><br><span class="line">ss&gt;&gt;oct;</span><br><span class="line">ss.clear();<span class="comment">//务必清除，否则会出错</span></span><br><span class="line">new_oct+=oct;<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">bit=str.substr(str.length()<span class="number">-3</span>);<span class="comment">//截取后三位</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,a;</span><br><span class="line"><span class="comment">//按权值相加，得到8进制数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="built_in">stringstream</span> s1;</span><br><span class="line">s1&lt;&lt;bit[i]; </span><br><span class="line">s1&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">sum+=<span class="built_in">pow</span>(<span class="number">2.0</span>,<span class="number">2</span>-i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str=str.substr(<span class="number">0</span>,str.length()<span class="number">-3</span>);<span class="comment">//删除后三位</span></span><br><span class="line"></span><br><span class="line">ss&lt;&lt;sum;</span><br><span class="line">ss&gt;&gt;oct;</span><br><span class="line">ss.clear(); <span class="comment">//务必清除，否则会出错</span></span><br><span class="line">new_oct+=oct;<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> new_oct;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//16进制转换2进制，此处注意：不足4位补齐四位 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">HexToBit</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;<span class="comment">//接收返回值 </span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;<span class="comment">//十进制数 </span></span><br><span class="line"><span class="keyword">char</span> cc[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">a=a+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">'A'</span>&amp;&amp;c&lt;=<span class="string">'F'</span>)</span><br><span class="line">a=a+c-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">itoa(a,cc,<span class="number">2</span>);<span class="comment">//将10进制数转换为2进制数</span></span><br><span class="line">str=cc;<span class="comment">//所得存入字符串 </span></span><br><span class="line">str=MakeUp(str,<span class="number">4</span>);<span class="comment">//补0，位数是4位</span></span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒置输出</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">IndOutput</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> oct;</span><br><span class="line"><span class="keyword">int</span> len=str.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==len<span class="number">-1</span>&amp;&amp;str[i]==<span class="string">'0'</span>)&#123;<span class="comment">//抹去0操作 </span></span><br><span class="line">oct+=<span class="string">""</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">oct+=str[i];<span class="comment">//字符串拼接</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> oct;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//数字个数</span></span><br><span class="line"><span class="built_in">string</span> hex[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> bit;<span class="comment">//存放2进制位 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="comment">//循环输入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;hex[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=hex[i].length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="built_in">string</span> str=hex[i].substr(j,<span class="number">1</span>);<span class="comment">//截取每一位</span></span><br><span class="line"><span class="keyword">char</span> c=str[<span class="number">0</span>];</span><br><span class="line">bit+=HexToBit(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;IndOutput(BitToOct(bit))&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//逆序输出，</span></span><br><span class="line">bit=<span class="string">"\0"</span>;<span class="comment">//bit清空 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>精简代码</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>, nNum = <span class="number">0</span>;  </span><br><span class="line">   <span class="keyword">char</span> ch;  </span><br><span class="line">   <span class="built_in">string</span> strHex[<span class="number">10</span>];  </span><br><span class="line">   <span class="built_in">string</span> strBin[<span class="number">10</span>];  </span><br><span class="line">   <span class="built_in">string</span> strOct[<span class="number">10</span>];  </span><br><span class="line"></span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;n;  </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;strHex[i];  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//十六进制转二进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = <span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">while</span> (strHex[i][j])  </span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="keyword">switch</span>(strHex[i][j])  </span><br><span class="line">           &#123;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'0'</span>: strBin[i] += <span class="string">"0000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'1'</span>: strBin[i] += <span class="string">"0001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'2'</span>: strBin[i] += <span class="string">"0010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'3'</span>: strBin[i] += <span class="string">"0011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'4'</span>: strBin[i] += <span class="string">"0100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'5'</span>: strBin[i] += <span class="string">"0101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'6'</span>: strBin[i] += <span class="string">"0110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'7'</span>: strBin[i] += <span class="string">"0111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'8'</span>: strBin[i] += <span class="string">"1000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'9'</span>: strBin[i] += <span class="string">"1001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'A'</span>: strBin[i] += <span class="string">"1010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'B'</span>: strBin[i] += <span class="string">"1011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'C'</span>: strBin[i] += <span class="string">"1100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'D'</span>: strBin[i] += <span class="string">"1101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'E'</span>: strBin[i] += <span class="string">"1110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'F'</span>: strBin[i] += <span class="string">"1111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">default</span>:<span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           ++j;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//二进制转化为八进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = strBin[i].size()<span class="number">-1</span>;<span class="comment">//获得长度  </span></span><br><span class="line">       <span class="keyword">while</span> (strBin[i][j] &amp;&amp; j&gt;=<span class="number">0</span>)  </span><br><span class="line">       &#123;  </span><br><span class="line">           temp = <span class="number">3</span>;  </span><br><span class="line">           nNum = <span class="number">0</span>;  </span><br><span class="line">           <span class="keyword">while</span> (temp-- &amp;&amp; j&gt;=<span class="number">0</span>)  </span><br><span class="line">           &#123;  </span><br><span class="line">               <span class="keyword">if</span> (<span class="string">'1'</span> == strBin[i][j])  </span><br><span class="line">               &#123;  </span><br><span class="line">                   <span class="keyword">switch</span>(temp)  </span><br><span class="line">                   &#123;  </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">0</span>: nNum += <span class="number">4</span>; <span class="keyword">break</span>;  </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">1</span>: nNum += <span class="number">2</span>; <span class="keyword">break</span>;  </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">2</span>: nNum += <span class="number">1</span>; <span class="keyword">break</span>;  </span><br><span class="line">                   <span class="keyword">default</span>:<span class="keyword">break</span>;  </span><br><span class="line">                   &#125;  </span><br><span class="line">               &#125;  </span><br><span class="line">               --j;  </span><br><span class="line">           &#125;  </span><br><span class="line">           strOct[i] += (nNum+<span class="string">'0'</span>);  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//字符串逆序  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       temp = strOct[i].size()<span class="number">-1</span>;  </span><br><span class="line">       <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= temp/<span class="number">2</span>; ++j)  </span><br><span class="line">       &#123;  </span><br><span class="line">           ch = strOct[i][j];  </span><br><span class="line">           strOct[i][j] = strOct[i][temp-j];  </span><br><span class="line">           strOct[i][temp-j] = ch;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">//打印  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = <span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">while</span> (strOct[i][j++] == <span class="string">'0'</span>);<span class="comment">//跳过前面的0  </span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(--j; j &lt; strOct[i].size(); ++j)  </span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;strOct[i][j]-<span class="string">'0'</span>;  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="comment">/*if (i != n-1)*/</span>  </span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">76</span></span><br><span class="line"><span class="number">941F</span>AB</span><br><span class="line"><span class="number">166</span></span><br><span class="line"><span class="number">45017653</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after <span class="number">12.85</span> seconds with <span class="keyword">return</span> value <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于进制的转换，字符转换后拼接尤为重要，而且得将他们先转为2进制，而16&gt;&gt;2，一位变四位，2&gt;&gt;，3位变一位，其中关于不够位的采取首项补0方式，这也是需要考虑到的。总之本次的进制转换不是最优的，会在下一次完善，可累死我了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16进制转8进制问题</title>
      <link href="/2019-12/21/Hexo%20theme/16%E8%BF%9B%E5%88%B6%E8%BD%AC8%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2019-12/21/Hexo%20theme/16%E8%BF%9B%E5%88%B6%E8%BD%AC8%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="16进制数转换为8进制数"><a href="#16进制数转换为8进制数" class="headerlink" title="16进制数转换为8进制数"></a>16进制数转换为8进制数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>　　给定n个十六进制正整数，输出它们对应的八进制数。</p><p><code>输入格式</code><br>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>　　接下来n行，每行一个由0<del>9、大写字母A</del>F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p><p><code>输出格式</code><br>　　输出n行，每行为输入对应的八进制正整数。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>将16进制逐位转换为4位2进制，然后再3位一组，转换为8进制数<br>注意：如果字符串的截取与拼接以及采用合适的符合题意的方式输出</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><code>完整代码</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;//用于实现string &gt;&gt; int </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;//数学函数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首位填充0元素 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">MakeUp</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> zero;</span><br><span class="line"><span class="keyword">int</span> len=str.length();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">if</span>(len&lt;num)&#123;</span><br><span class="line">n=num-len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">zero+=<span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">return</span> zero+str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2进制转8进制 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BitToOct</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> oct;<span class="comment">//8进制字符串接收返回值 </span></span><br><span class="line"><span class="built_in">string</span> new_oct;</span><br><span class="line"><span class="built_in">string</span> bit;<span class="comment">//存储截取的3位2进制字符串</span></span><br><span class="line"><span class="built_in">stringstream</span> ss;<span class="comment">//采用文件流将string 与 int 相互转换</span></span><br><span class="line"><span class="keyword">while</span>(str.length()!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//判断是否够3位</span></span><br><span class="line"><span class="keyword">if</span>(str.length()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">str=MakeUp(str,<span class="number">3</span>);<span class="comment">//补0，位数是3位</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,a;</span><br><span class="line"><span class="comment">//按权值相加，得到8进制数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="built_in">stringstream</span> s1;</span><br><span class="line">s1&lt;&lt;str[i]; </span><br><span class="line">s1&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">sum+=<span class="built_in">pow</span>(<span class="number">2.0</span>,<span class="number">2</span>-i);</span><br><span class="line">&#125;</span><br><span class="line">str=<span class="string">"\0"</span>;<span class="comment">//字符串清空 </span></span><br><span class="line">ss&lt;&lt;sum;</span><br><span class="line">ss&gt;&gt;oct;</span><br><span class="line">ss.clear();<span class="comment">//务必清除，否则会出错</span></span><br><span class="line">new_oct+=oct;<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">bit=str.substr(str.length()<span class="number">-3</span>);<span class="comment">//截取后三位</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,a;</span><br><span class="line"><span class="comment">//按权值相加，得到8进制数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="built_in">stringstream</span> s1;</span><br><span class="line">s1&lt;&lt;bit[i]; </span><br><span class="line">s1&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">sum+=<span class="built_in">pow</span>(<span class="number">2.0</span>,<span class="number">2</span>-i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str=str.substr(<span class="number">0</span>,str.length()<span class="number">-3</span>);<span class="comment">//删除后三位</span></span><br><span class="line"></span><br><span class="line">ss&lt;&lt;sum;</span><br><span class="line">ss&gt;&gt;oct;</span><br><span class="line">ss.clear(); <span class="comment">//务必清除，否则会出错</span></span><br><span class="line">new_oct+=oct;<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> new_oct;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//16进制转换2进制，此处注意：不足4位补齐四位 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">HexToBit</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;<span class="comment">//接收返回值 </span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;<span class="comment">//十进制数 </span></span><br><span class="line"><span class="keyword">char</span> cc[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</span><br><span class="line">a=a+c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">'A'</span>&amp;&amp;c&lt;=<span class="string">'F'</span>)</span><br><span class="line">a=a+c-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">itoa(a,cc,<span class="number">2</span>);<span class="comment">//将10进制数转换为2进制数</span></span><br><span class="line">str=cc;<span class="comment">//所得存入字符串 </span></span><br><span class="line">str=MakeUp(str,<span class="number">4</span>);<span class="comment">//补0，位数是4位</span></span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒置输出</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">IndOutput</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> oct;</span><br><span class="line"><span class="keyword">int</span> len=str.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==len<span class="number">-1</span>&amp;&amp;str[i]==<span class="string">'0'</span>)&#123;<span class="comment">//抹去0操作 </span></span><br><span class="line">oct+=<span class="string">""</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">oct+=str[i];<span class="comment">//字符串拼接</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> oct;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//数字个数</span></span><br><span class="line"><span class="built_in">string</span> hex[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> bit;<span class="comment">//存放2进制位 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="comment">//循环输入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;hex[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len=hex[i].length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line"><span class="built_in">string</span> str=hex[i].substr(j,<span class="number">1</span>);<span class="comment">//截取每一位</span></span><br><span class="line"><span class="keyword">char</span> c=str[<span class="number">0</span>];</span><br><span class="line">bit+=HexToBit(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;IndOutput(BitToOct(bit))&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//逆序输出，</span></span><br><span class="line">bit=<span class="string">"\0"</span>;<span class="comment">//bit清空 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>精简代码</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>, nNum = <span class="number">0</span>;  </span><br><span class="line">   <span class="keyword">char</span> ch;  </span><br><span class="line">   <span class="built_in">string</span> strHex[<span class="number">10</span>];  </span><br><span class="line">   <span class="built_in">string</span> strBin[<span class="number">10</span>];  </span><br><span class="line">   <span class="built_in">string</span> strOct[<span class="number">10</span>];  </span><br><span class="line"></span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;n;  </span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       <span class="built_in">cin</span>&gt;&gt;strHex[i];  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//十六进制转二进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = <span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">while</span> (strHex[i][j])  </span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="keyword">switch</span>(strHex[i][j])  </span><br><span class="line">           &#123;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'0'</span>: strBin[i] += <span class="string">"0000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'1'</span>: strBin[i] += <span class="string">"0001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'2'</span>: strBin[i] += <span class="string">"0010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'3'</span>: strBin[i] += <span class="string">"0011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'4'</span>: strBin[i] += <span class="string">"0100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'5'</span>: strBin[i] += <span class="string">"0101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'6'</span>: strBin[i] += <span class="string">"0110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'7'</span>: strBin[i] += <span class="string">"0111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'8'</span>: strBin[i] += <span class="string">"1000"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'9'</span>: strBin[i] += <span class="string">"1001"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'A'</span>: strBin[i] += <span class="string">"1010"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'B'</span>: strBin[i] += <span class="string">"1011"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'C'</span>: strBin[i] += <span class="string">"1100"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'D'</span>: strBin[i] += <span class="string">"1101"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'E'</span>: strBin[i] += <span class="string">"1110"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">'F'</span>: strBin[i] += <span class="string">"1111"</span>; <span class="keyword">break</span>;  </span><br><span class="line">           <span class="keyword">default</span>:<span class="keyword">break</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           ++j;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//二进制转化为八进制  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = strBin[i].size()<span class="number">-1</span>;<span class="comment">//获得长度  </span></span><br><span class="line">       <span class="keyword">while</span> (strBin[i][j] &amp;&amp; j&gt;=<span class="number">0</span>)  </span><br><span class="line">       &#123;  </span><br><span class="line">           temp = <span class="number">3</span>;  </span><br><span class="line">           nNum = <span class="number">0</span>;  </span><br><span class="line">           <span class="keyword">while</span> (temp-- &amp;&amp; j&gt;=<span class="number">0</span>)  </span><br><span class="line">           &#123;  </span><br><span class="line">               <span class="keyword">if</span> (<span class="string">'1'</span> == strBin[i][j])  </span><br><span class="line">               &#123;  </span><br><span class="line">                   <span class="keyword">switch</span>(temp)  </span><br><span class="line">                   &#123;  </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">0</span>: nNum += <span class="number">4</span>; <span class="keyword">break</span>;  </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">1</span>: nNum += <span class="number">2</span>; <span class="keyword">break</span>;  </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">2</span>: nNum += <span class="number">1</span>; <span class="keyword">break</span>;  </span><br><span class="line">                   <span class="keyword">default</span>:<span class="keyword">break</span>;  </span><br><span class="line">                   &#125;  </span><br><span class="line">               &#125;  </span><br><span class="line">               --j;  </span><br><span class="line">           &#125;  </span><br><span class="line">           strOct[i] += (nNum+<span class="string">'0'</span>);  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//字符串逆序  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       temp = strOct[i].size()<span class="number">-1</span>;  </span><br><span class="line">       <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= temp/<span class="number">2</span>; ++j)  </span><br><span class="line">       &#123;  </span><br><span class="line">           ch = strOct[i][j];  </span><br><span class="line">           strOct[i][j] = strOct[i][temp-j];  </span><br><span class="line">           strOct[i][temp-j] = ch;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">//打印  </span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)  </span><br><span class="line">   &#123;  </span><br><span class="line">       j = <span class="number">0</span>;  </span><br><span class="line">       <span class="keyword">while</span> (strOct[i][j++] == <span class="string">'0'</span>);<span class="comment">//跳过前面的0  </span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(--j; j &lt; strOct[i].size(); ++j)  </span><br><span class="line">       &#123;  </span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;strOct[i][j]-<span class="string">'0'</span>;  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="comment">/*if (i != n-1)*/</span>  </span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">76</span></span><br><span class="line"><span class="number">941F</span>AB</span><br><span class="line"><span class="number">166</span></span><br><span class="line"><span class="number">45017653</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after <span class="number">12.85</span> seconds with <span class="keyword">return</span> value <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于进制的转换，字符转换后拼接尤为重要，而且得将他们先转为2进制，而16&gt;&gt;2，一位变四位，2&gt;&gt;，3位变一位，其中关于不够位的采取首项补0方式，这也是需要考虑到的。总之本次的进制转换不是最优的，会在下一次完善，可累死我了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列求和</title>
      <link href="/2019-12/18/%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/"/>
      <url>/2019-12/18/%E5%BA%8F%E5%88%97%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="序列求和"><a href="#序列求和" class="headerlink" title="序列求和"></a>序列求和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>求1+2+3+…+n的值。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p>说明：请注意这里的数据规模。</p><p>本题直接的想法是直接使用一个循环来累加，然而，当数据规模很大时，这种“暴力”的方法往往会导致超时。此时你需要想想其他方法。你可以试一试，如果使用<code>1000000000</code>作为你的程序的输入，你的程序是不是能在规定的上面规定的时限内运行出来。<br>本题另一个要值得注意的地方是答案的大小不在你的语言默认的整型(int)范围内，如果使用整型来保存结果，会导致结果错误。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d"</span>,(<span class="number">1</span>+n)*n/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">100000000</span></span><br><span class="line"><span class="number">5000000050000000</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after <span class="number">3.968</span> seconds with <span class="keyword">return</span> value <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>本题直接的想法是直接使用一个循环来累加，如果你使用C++或C语言而且准备使用<code>printf</code>输出结果，则你的格式字符串应该写成<code>%I64d</code>以输出<code>long long</code>类型的整数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语法学习01</title>
      <link href="/2019-12/12/C++study01/"/>
      <url>/2019-12/12/C++study01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-语法学习"><a href="#C-语法学习" class="headerlink" title="C++语法学习"></a>C++语法学习</h1><p>将通过一些简单<code>demo</code>来学习 C++的基本语法基础，博主是有一定C的基础的，所以在默写太基础的释义上将不会做过多的解释，顺序在某些情况而言可能是比较乱的，没有一个合理的规整，学到啥，看到啥，就记录啥。</p><h2 id="什么是C"><a href="#什么是C" class="headerlink" title="什么是C++"></a>什么是C++</h2><p>C++就是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。<br><code>这东西讲了好像也并不能给代码有啥帮助，认识认识就好了</code></p><ul><li><a href="https://baike.baidu.com/item/C++/99272" target="_blank" rel="noopener">百度百科——C++</a></li><li><a href="https://www.runoob.com/cplusplus/cpp-tutorial.html" target="_blank" rel="noopener">菜鸟教程——C++</a></li><li><a href="http://c.biancheng.net/cplus/" target="_blank" rel="noopener">C语言中文网——C++</a></li><li><a href="http://tieba.baidu.com/f?kw=c%2B%2B&fr=ala0&tpl=5&traceid=" target="_blank" rel="noopener">百度贴吧——C++</a></li><li><strong>…</strong></li><li>没了<h2 id="简要介绍一段程序"><a href="#简要介绍一段程序" class="headerlink" title="简要介绍一段程序"></a>简要介绍一段程序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;//引用函数库(头文件)</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// main() 是程序开始执行的地方</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 输出 Hello World</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>你可以用 “\n” 代替以上代码里的 endl。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World\n"</span>; <span class="comment">// 输出 Hello World</span></span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><code>#include&lt;iostream&gt;</code><h3 id="这是啥"><a href="#这是啥" class="headerlink" title="这是啥"></a>这是啥</h3><blockquote><p><code>iostream</code>是C++标准库的头定义， 对应的基本上是C++的输入输出相关库定义<br>就好比<code>stdio</code> 是C标准库里面的函数库 对应的基本都是标准输入输出等等C语言常用库的定义</p></blockquote><h3 id="还有啥"><a href="#还有啥" class="headerlink" title="还有啥"></a>还有啥</h3></li><li><code>#include&lt;iomanip&gt;</code>    控制精度</li><li><code>#include&lt;cmath&gt;</code>    数学函数</li><li><code>#include&lt;string&gt;</code>        字符串</li><li><code>#include&lt;algorithm&gt;</code>STL通用算法</li><li><strong>…</strong></li><li>又没了</li><li><a href="https://zh.cppreference.com/w/cpp/header" target="_blank" rel="noopener">C++ 标准库头文件</a><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><code>using namespace std;</code>告诉编译器使用 <code>std</code> 命名空间。命名空间是 C++ 中一个相对新的概念<h2 id="C-关键字"><a href="#C-关键字" class="headerlink" title="C++ 关键字"></a>C++ 关键字</h2>下表列出了 C++ 中的保留字。这些保留字不能作为常量名、变量名或其他标识符名称。<table><thead><tr><th>asm</th><th>else</th><th>new</th><th>this</th></tr></thead><tbody><tr><td>auto</td><td>enum</td><td>operator</td><td>throw</td></tr><tr><td>bool</td><td>explicit</td><td>private</td><td>true</td></tr><tr><td>break</td><td>export</td><td>protected</td><td>try</td></tr><tr><td>case</td><td>extern</td><td>public</td><td>typedef</td></tr><tr><td>catch</td><td>false</td><td>register</td><td>typeid</td></tr><tr><td>char</td><td>float</td><td>reinterpret_cast</td><td>typename</td></tr><tr><td>class</td><td>for</td><td>return</td><td>union</td></tr><tr><td>const</td><td>friend</td><td>short</td><td>unsigned</td></tr><tr><td>const_cast</td><td>goto</td><td>signed</td><td>using</td></tr><tr><td>continue</td><td>if</td><td>sizeof</td><td>virtual</td></tr><tr><td>default</td><td>inline</td><td>static</td><td>void</td></tr><tr><td>delete</td><td>int</td><td>static_cast</td><td>volatile</td></tr><tr><td>do</td><td>long</td><td>struct</td><td>wchar_t</td></tr><tr><td>double</td><td>mutable</td><td>switch</td><td>while</td></tr><tr><td>dynamic_cast</td><td>namespace</td><td>template</td><td></td></tr></tbody></table><blockquote><p>完整关键字介绍可查阅：<a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html" target="_blank" rel="noopener">C++ 的关键字（保留字）完整介绍</a></p></blockquote></li></ul><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><code>输入</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;<span class="comment">//分别给a,b,c三个变量赋值</span></span><br></pre></td></tr></table></figure><blockquote><p>数组同样可以采用这种方式输入，也可以同时输入几个数据类型不相同的数据</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;name;</span><br></pre></td></tr></table></figure><p><code>输出</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//打印输入a,b,c</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"a="</span>&lt;&lt; a &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//字符拼接</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>给定你一个销售人员的名字，底薪以及月销售额。<br>请你计算他的月收入是多少。<br>已知月收入等于底薪加15%的月销售额。<br>所有数据保留两位小数。</p></blockquote><p><code>输入格式</code></p><blockquote><p>输入第一行包含一个由大写字母构成的长度不超过10的字符串，表示销售人员的名字。<br>第二行包含一个浮点数，表示该人员的底薪。<br>第三行包含一个浮点数，表示该人员的月销售额。</p></blockquote><p><code>输出格式</code></p><blockquote><p>输出格式为“TOTAL = R$ X”，X为该人员月收入。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;//引用标准的函数库，包含输入输出</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//给定命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">float</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;name&gt;&gt;a&gt;&gt;b;<span class="comment">//多个数据输入，包含数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"TOTAL = R$ %.2f"</span>,a+b*<span class="number">0.15</span>);<span class="comment">//通过printf控制精度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型<br>| 类型     | 关键字  |<br>| ——– | ——- |<br>| 布尔型   | bool    |<br>| 字符型   | char    |<br>| 整型     | int     |<br>| 浮点型   | float   |<br>| 双浮点型 | double  |<br>| 无类型   | void    |<br>| 宽字符型 | wchar_t |</p><blockquote><p>搞不懂宽字符有啥用，不去钻了</p></blockquote><table><thead><tr><th>类型</th><th>位</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1 个字节</td><td>-128 到 127 或者 0 到 255</td></tr><tr><td>unsigned</td><td>char</td><td>1 个字节    0 到 255</td></tr><tr><td>signed</td><td>char</td><td>1 个字节    -128 到 127</td></tr><tr><td>int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>unsigned int</td><td>4 个字节</td><td>0 到 4294967295</td></tr><tr><td>signed int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>short int</td><td>2 个字节</td><td>-32768 到 32767</td></tr><tr><td>unsigned short int</td><td>2 个字节</td><td>0 到 65,535</td></tr><tr><td>signed short int</td><td>2 个字节</td><td>-32768 到 32767</td></tr><tr><td>long int</td><td>8 个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td>signed long int</td><td>8 个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td>unsigned long int</td><td>8 个字节</td><td>0 到 18,446,744,073,709,551,615</td></tr><tr><td>float</td><td>4 个字节</td><td>精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)</td></tr><tr><td>double</td><td>8 个字节</td><td>双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)</td></tr><tr><td>long double</td><td>16 个字节</td><td>长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。</td></tr><tr><td>wchar_t</td><td>2 或 4 个字节</td><td>1 个宽字符</td></tr></tbody></table><blockquote><p><code>注：变量的大小会根据编译器和所使用的电脑而有所不同。</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"type: \t\t"</span> &lt;&lt; <span class="string">"************size**************"</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"bool: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"char: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed char: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned char: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"wchar_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"short: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned long: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"double: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long double: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"float: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">size_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">size_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"string: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">string</span>) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="comment">// &lt;&lt; "\t最大值：" &lt;&lt; (numeric_limits&lt;string&gt;::max)() &lt;&lt; "\t最小值：" &lt;&lt; (numeric_limits&lt;string&gt;::min)() &lt;&lt; endl;  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"type: \t\t"</span> &lt;&lt; <span class="string">"************size**************"</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">type:           ************size**************</span><br><span class="line"><span class="keyword">bool</span>:           所占字节数：<span class="number">1</span>   最大值：<span class="number">1</span>               最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">char</span>:           所占字节数：<span class="number">1</span>   最大值：               最小值：€</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span>:    所占字节数：<span class="number">1</span>   最大值：               最小值：€</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>:  所占字节数：<span class="number">1</span>   最大值：              最小值：</span><br><span class="line"><span class="keyword">wchar_t</span>:        所占字节数：<span class="number">2</span>   最大值：<span class="number">65535</span>           最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">short</span>:          所占字节数：<span class="number">2</span>   最大值：<span class="number">32767</span>           最小值：<span class="number">-32768</span></span><br><span class="line"><span class="keyword">int</span>:            所占字节数：<span class="number">4</span>   最大值：<span class="number">2147483647</span>      最小值：<span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">unsigned</span>:       所占字节数：<span class="number">4</span>   最大值：<span class="number">4294967295</span>      最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">long</span>:           所占字节数：<span class="number">4</span>   最大值：<span class="number">2147483647</span>      最小值：<span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>:  所占字节数：<span class="number">4</span>   最大值：<span class="number">4294967295</span>      最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">double</span>:         所占字节数：<span class="number">8</span>   最大值：<span class="number">1.79769e+308</span>    最小值：<span class="number">2.22507e-308</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span>:    所占字节数：<span class="number">12</span>  最大值：<span class="number">1.18973e+4932</span>   最小值：<span class="number">3.3621e-4932</span></span><br><span class="line"><span class="keyword">float</span>:          所占字节数：<span class="number">4</span>   最大值：<span class="number">3.40282e+038</span>    最小值：<span class="number">1.17549e-038</span></span><br><span class="line"><span class="keyword">size_t</span>:         所占字节数：<span class="number">4</span>   最大值：<span class="number">4294967295</span>      最小值：<span class="number">0</span></span><br><span class="line"><span class="built_in">string</span>:         所占字节数：<span class="number">4</span></span><br><span class="line">type:           ************size**************</span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><blockquote><p><code>注意数据精度的控制与整型长度的控制，选用不同的数据类型，避免数据错误或数据溢出</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找出数组中重复的数字</title>
      <link href="/2019-12/11/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2019-12/11/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="找出数组中重复的数字"><a href="#找出数组中重复的数字" class="headerlink" title="找出数组中重复的数字"></a>找出数组中重复的数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 n 的整数数组 <code>nums</code>，数组中所有的数字都在 0∼n−1 的范围内。</p><p>数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。</p><p>请找出数组中任意一个重复的数字。</p><blockquote><p><strong>注意</strong>：如果某些数字不在 0∼n−1 的范围内，或数组中不包含重复数字，则返回 -1；</p></blockquote><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>]。</span><br><span class="line"></span><br><span class="line">返回 <span class="number">2</span> 或 <span class="number">3</span>。</span><br></pre></td></tr></table></figure><blockquote><p>返回其中任意一个重复的数都可以</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先确定数组里的数字是在给定范围内，否则返回-1</p><p>然后将所有元素从首位元素开始，将其放到对应号数的位置上</p><p>反复循环，一直将首位元素换作</p><h3 id="含有重复数字"><a href="#含有重复数字" class="headerlink" title="含有重复数字"></a><code>含有重复数字</code></h3><blockquote><p>例如<br><code>nums =[2,1,4,3,2]</code></p><ul><li>判断数字是否在范围内就不作解释，自行遍历每一个元素，判断是否在内即可<br><img alt data-src="https://img-blog.csdnimg.cn/20191211162014313.png" class="lazyload"><br><em>交换后nums[2]=2，那么此时的nums[0]=4,所以需要再将此时的num[0]中的值放入指定坑位</em><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211163441183.png" class="lazyload"><br>重复执行操作<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211162639401.png" class="lazyload"><br>此时num[0]=2，那么可以看到此时2号坑有相同元素2，所以<code>无法交换</code>，此时的nums[0]上的2号不等于当前坑号，则返回当前元素</li></ul></blockquote><h3 id="未包含重复元素"><a href="#未包含重复元素" class="headerlink" title="未包含重复元素"></a><code>未包含重复元素</code></h3><blockquote><p>例如<br><code>nums =[2,1,4,0,3]</code></p><ul><li>判断数字是否在范围内就不作解释，自行遍历每一个元素，判断是否在内即可<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211164949862.png" class="lazyload"><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211165011892.png" class="lazyload"><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211165033939.png" class="lazyload"><br>此时首位元素<code>num[0]=0</code>，已经等于自己且等于该坑位，所以进行下一个循环<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211165146532.png" class="lazyload"><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191211165154961.png" class="lazyload"><br>这会儿数组已经遍历完毕，未找到重复数字，则 <code>return -1;</code></li></ul></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">duplicateInArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否在n-1范围内</span></span><br><span class="line">        <span class="keyword">int</span> l=nums.size();<span class="comment">//获取输出的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> n:nums)</span><br><span class="line">            <span class="keyword">if</span>(n&lt;<span class="number">0</span>||n&gt;=l)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//从首位遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[nums[i]]!=nums[i])<span class="comment">//如果元素不在对应的坑上，则交换到对应坑位</span></span><br><span class="line">                swap(nums[i],nums[nums[i]]);<span class="comment">//交换</span></span><br><span class="line">                <span class="keyword">if</span>(nums[i]!=i)<span class="comment">//判断重复元素</span></span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">duplicateInArray</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;<span class="number">0</span>||nums[i]&gt;=numsSize)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(nums[nums[i]]!=nums[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=nums[nums[i]];</span><br><span class="line">            nums[nums[i]]=nums[i];</span><br><span class="line">            nums[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=i)</span><br><span class="line">            <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="超出范围"><a href="#超出范围" class="headerlink" title="超出范围"></a><code>超出范围</code></h3><blockquote><p><code>输入</code><br>[1, 3, 2, 4, 3, 3, 6, 9]</p></blockquote><blockquote><p><code>输出</code><br><code>-1</code></p></blockquote><h3 id="重复元素"><a href="#重复元素" class="headerlink" title="重复元素"></a><code>重复元素</code></h3><blockquote><p><code>输入</code><br>[5, 3, 5, 4, 3, 2, 6, 7]</p></blockquote><blockquote><p><code>输出</code><br><code>5</code></p></blockquote><h3 id="未重复元素"><a href="#未重复元素" class="headerlink" title="未重复元素"></a><code>未重复元素</code></h3><blockquote><p><code>输入</code><br>[1, 4, 2, 0, 3, 5, 6, 7]</p></blockquote><blockquote><p><code>输出</code><br><code>-1</code></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>判断是否存在重复数字，首先得判断数字范围是否在题目规定范围内。其次再把每一个数的循环遍历，放在对应的坑位，如果放不了，就说明这个坑位有相同的数字占用着，那么就可以找到重复的数字</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数的颠倒问题</title>
      <link href="/2019-12/11/%E6%95%B0%E7%9A%84%E9%A2%A0%E5%80%92%E9%97%AE%E9%A2%98/"/>
      <url>/2019-12/11/%E6%95%B0%E7%9A%84%E9%A2%A0%E5%80%92%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数的颠倒"><a href="#数的颠倒" class="headerlink" title="数的颠倒"></a>数的颠倒</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>给定一个范围为 32 位 int 的整数，将其颠倒。<br>例如，给定123,返回321;给定-12, 返回-21;给定120,返回21 。</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先应该判断该数字是否符合题意，是否在给定范围内。<br>其次将判断数字末尾是否包含<code>0</code>，<br>接着<br>注意0作首位情况要舍去0</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;//strlen获取数组实际长度方法 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[N]=<span class="string">"\0"</span>;<span class="comment">//初始化数组</span></span><br><span class="line"><span class="keyword">char</span> new_num[N]=<span class="string">"\0"</span>;<span class="comment">//初始化新数组</span></span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;<span class="comment">//数组长度变量 </span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">gets(num);</span><br><span class="line">len=<span class="built_in">strlen</span>(num);</span><br><span class="line"><span class="comment">//判断长度之前，首先考虑是整数还是负数</span></span><br><span class="line"><span class="comment">//正数长度在32位，负数长度在33位（包括一个符号位） </span></span><br><span class="line"><span class="comment">//判读长度范围，否则 return -1 </span></span><br><span class="line"><span class="keyword">if</span>(num[<span class="number">0</span>]!=<span class="string">'-'</span>)&#123;</span><br><span class="line"><span class="comment">//正数</span></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>&amp;&amp;len&lt;<span class="number">33</span>)<span class="comment">//32位数字，无符号位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(num[len<span class="number">-1</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line">num[len<span class="number">-1</span>]=<span class="string">'\0'</span>;<span class="comment">//减去末尾</span></span><br><span class="line">len=<span class="built_in">strlen</span>(num);<span class="comment">//返回新长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">new_num[i]=num[len<span class="number">-1</span>-i];<span class="comment">//倒置交换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(new_num);<span class="comment">//输出</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//负数</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">0</span>&amp;&amp;len&lt;=<span class="number">33</span>)<span class="comment">//32位数字，1位符号位</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(num[len<span class="number">-1</span>]==<span class="string">'0'</span>)&#123;</span><br><span class="line">num[len<span class="number">-1</span>]=<span class="string">'\0'</span>;<span class="comment">//减去末尾</span></span><br><span class="line">len=<span class="built_in">strlen</span>(num);<span class="comment">//返回新长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">new_num[i]=num[i];<span class="comment">//第一位符号位，原样返回至首位</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">new_num[i]=num[len-i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(new_num);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><code>正数</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">54645645645456</span></span><br><span class="line"><span class="number">65454654654645</span></span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><p><code>负数</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">-43534300</span></span><br><span class="line"><span class="number">-343534</span></span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里遇到很多坑，32位长度的数字，无法使用合理的数据类型来装，都会倒置<code>数据溢出</code>，于是采用数组存每一个数字，关于数组持续输入，采用<code>gets()</code>方法，持续输入到数组里面，对于数的正负判断，同样规定数组长度范围</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圆的面积问题</title>
      <link href="/2019-12/10/%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2019-12/10/%E5%9C%86%E7%9A%84%E9%9D%A2%E7%A7%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="圆的面积"><a href="#圆的面积" class="headerlink" title="圆的面积"></a>圆的面积</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定圆的半径r，求圆的面积。<br>输入格式<br>输入包含一个整数r，表示圆的半径。<br>输出格式<br>输出一行，包含一个实数，四舍五入<code>保留小数点后7位</code>，表示圆的面积。 </p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p>在本题中，输入是一个整数，但是输出是一个实数。<br>对于实数输出的问题，一定看清楚实数输出的要求<br>本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误的。<br><code>实数输出的问题如果没有特别说明，舍入都是按四舍五入进行的</code></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;  //atan函数 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI atan(1.0)*4</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.7f"</span>,PI*r*r);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">706.8583471</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里的精度控制采用<code>%.7f</code><br>①对<code>π</code> ，取值时可以直接引用数学公式<code>atan(1.0)*4——引入库 #include &lt;math.h&gt;</code><br>②<code>float</code>型数据，最多保留小数点后6位小数，精确到小数点后几位，输出时按（例：<code>%.7f</code>）格式（基本语句！！）<br>③如果输出用%.7lf 则CPU会占用15ms，用%.7f 输出，CPU占用0ms</p><blockquote><p><code>注：此处的PI要么用就给很长很长的小数（那你得记得住），要么采用数学公式得到PI的值</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fibonacc数列Fn取余</title>
      <link href="/2019-12/10/Fibonacc%E6%95%B0%E5%88%97Fn%E5%8F%96%E4%BD%99/"/>
      <url>/2019-12/10/Fibonacc%E6%95%B0%E5%88%97Fn%E5%8F%96%E4%BD%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Fibonacc数列Fn项取余"><a href="#Fibonacc数列Fn项取余" class="headerlink" title="Fibonacc数列Fn项取余"></a>Fibonacc数列Fn项取余</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>斐波那契数列是一组第一位F1和第二位F2为1，从第三位开始，后一位是前两位和的一组递增数列Fn=Fn-1+Fn-2。 那么当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p><blockquote><p>如：<br>输入格式<br>输入包含一个整数n。<br>输出格式<br>输出一行，包含一个整数，表示Fn除以10007的余数。</p></blockquote><blockquote><p><code>样例输入10 此时Fibonacc[ ] = {1,1,2,3,5,8,13,21,34,55}</code><br><code>样例输出55</code></p></blockquote><blockquote><p><code>样例输入22 此时Fibonacc[ ] = {1,1,2,3,5,8,13,21,34,55…,10946,17711}</code><br><code>样例输出7704</code></p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>此处使用了动态定义数组方式，将数组实现动态规划长度，使用了<code>malloc</code>函数，关于<code>malloc</code>函数可以参照<a href="https://blog.csdn.net/chf_1/article/details/78688557" target="_blank" rel="noopener">malloc的用法和意义</a>，有关于<code>malloc</code>的一些详细讲解，在这儿不做过多的解释，简要介绍些动态定义数组长度的方式</p><blockquote><p>malloc函数的使用格式一般为<br>int len;<br>int * Num = (int*)malloc(sizeof(int) * len); //len生成的数组长度，<br><code>此时Num就是一个为int类型的，可以容纳len个元素的动态数组</code></p></blockquote><p><code>注：malloc是按字节数生成的空间大小，不是按照数组长度；动态数组最后要free掉，这点和new生成后要delete的道理一致</code></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10007</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *num;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">num=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//动态规划数组，长度为 n </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">2</span>)</span><br><span class="line">num[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">num[i]=(num[i<span class="number">-1</span>]+num[i<span class="number">-2</span>])%N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num[n<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">free</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">7704</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>对于此类斐波拉契数列如果是采用数组方式，则要考虑到数组的长度定义问题，可以给定一个很大范围的数组，这样未来保证数组不会越界，也可以采用<code>malloc</code>动态定义数组的长度，为了控制数据类型不会溢出，在此将每一项的的余数存放在数组里面，保证了每一项都小于<code>N</code> <code>10007</code>，也控制了数据范围在Int内可以得到</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波拉契数列</title>
      <link href="/2019-12/10/Fibonacc/"/>
      <url>/2019-12/10/Fibonacc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>斐波那契数列是一组第一位<code>F1</code>和第二位<code>F2</code>为1，从第三位开始，后一位是前两位和的一组递增数列<code>Fn</code>=<code>Fn-1</code>+<code>Fn-2</code>。<br>那么当<code>n</code>比较大时，<code>Fn</code>也非常大，现在我们想知道，第<code>n</code>项，<code>Fn</code>等于多少</p><blockquote><p>如：<br>输入格式<br>输入包含一个整数n。<br>输出格式<br>输出一行，包含一个整数，表示Fn。</p></blockquote><blockquote><p><code>样例输入10</code>     此时Fibonacc[ ] = {1,1,2,3,5,8,13,21,34,55}<br><code>样例输出55</code></p></blockquote><blockquote><p><code>样例输入28</code>     此时Fibonacc[ ] = {1,1,2,3,5,8,13,21,34,55…,10946,17711}<br><code>样例输出317811</code></p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>数组前两位默认为1，那么就可以从第三位开始，或者在计算的时候实现一个判断，将前两位返回1。实现方式有许多</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="数组方式"><a href="#数组方式" class="headerlink" title="数组方式"></a><code>数组方式</code></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *num;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">num=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//动态规划数组，长度为 n </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">2</span>)</span><br><span class="line">num[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">num[i]=num[i<span class="number">-1</span>]+num[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num[n<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">free</span>(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a><code>递归方式</code></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Fibonacc(n<span class="number">-2</span>)+Fibonacc(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Fibonacc(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归方式"><a href="#非递归方式" class="headerlink" title="非递归方式"></a><code>非递归方式</code></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f_left=<span class="number">1</span>;<span class="comment">//左边一个数</span></span><br><span class="line"><span class="keyword">int</span> f_right=<span class="number">1</span>;<span class="comment">//右边一个数</span></span><br><span class="line"><span class="keyword">int</span> f_n=<span class="number">0</span>;<span class="comment">//结果数</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">f_n=f_left+f_right;<span class="comment">//先左数+右数得到一个新的结果</span></span><br><span class="line">f_left=f_right;<span class="comment">//此时右边的数作为新的左数</span></span><br><span class="line">f_right=f_n;<span class="comment">//刚才的结果作为新的右数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f_n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Fibonacc(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">317811</span></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited with <span class="keyword">return</span> value <span class="number">0</span></span><br><span class="line">Press any key to <span class="keyword">continue</span> . . .</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>对于此类斐波拉契数列如果是采用数组方式，则要考虑到数组的长度定义问题，那么就需要动态定义数组长度，数组分别记录数列的每一项，占用内存则会太多，如果是采用递归，则不需要那么繁琐，依次累加最终得到最后一项，但是时间则需要太多，各个方式有利有弊。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2019-12/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019-12/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为什么要学设计模式</p><h2 id="程序设计原则"><a href="#程序设计原则" class="headerlink" title="程序设计原则"></a>程序设计原则</h2><ol><li>单一原则（降低耦合度）<br>两者各做各的事儿，要实现复合型功能，那么就采取合作</li><li>增强代码复用性（抽取公共的部分）</li></ol><blockquote><p>创建三个类，表示三个国家的人，分别包含<code>name</code>,<code>age</code>,<code>sex</code>,<code>national</code>，另带一个方法，说出国家名。 </p></blockquote><blockquote><p>小白之冗余模式：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,national</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">    obj.name=name;</span><br><span class="line">    obj.age=age;</span><br><span class="line">    obj.sex=sex;</span><br><span class="line">    obj.national=national;</span><br><span class="line">    obj.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"speak A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> B=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,national</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">    obj.name=name;</span><br><span class="line">    obj.age=age;</span><br><span class="line">    obj.sex=sex;</span><br><span class="line">    obj.national=national;</span><br><span class="line">    obj.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"speak B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> C=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,national</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">    obj.name=name;</span><br><span class="line">    obj.age=age;</span><br><span class="line">    obj.sex=sex;</span><br><span class="line">    obj.national=national;</span><br><span class="line">    obj.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"speak C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此处可以看到，每一个国家都要构建一个类，多要重复赋值属性，与编写方法，代码复用性不强，应将代码公共部分抽出来，采用抽象思想，将公共部分抽象出来，做成一个框架，一个规范，具体是如何实现通过需要进行批量生产出来，其中就包含所需要的公共部分</p><blockquote><p>抽象工厂模式</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex,national</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=name;</span><br><span class="line">            <span class="keyword">this</span>.age=age;</span><br><span class="line">            <span class="keyword">this</span>.sex=sex;</span><br><span class="line">            <span class="keyword">this</span>.national=national;</span><br><span class="line">        &#125;</span><br><span class="line">        Person.prototype.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"父类的抽象方法，无实际内容"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 实例A</span></span><br><span class="line">        <span class="keyword">var</span> A=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,national</span>)</span>&#123;</span><br><span class="line">            Person.call(<span class="keyword">this</span>,name,age,sex,national);</span><br><span class="line">        &#125;</span><br><span class="line">        A.prototype.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"speak A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> A().speak();</span><br><span class="line">        <span class="comment">//实例B</span></span><br><span class="line">        <span class="keyword">var</span> B=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,sex,national</span>)</span>&#123;</span><br><span class="line">            Person.call(<span class="keyword">this</span>,name,age,sex,national);</span><br><span class="line">        &#125;</span><br><span class="line">        B.prototype.speak=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"speak B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> B().speak();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tampermonkey油猴脚本的安装与使用</title>
      <link href="/2019-12/09/Tampermonkey_Init/"/>
      <url>/2019-12/09/Tampermonkey_Init/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Tampermonkey安装地址</p><blockquote><p>百度网盘<br>链接: <a href="https://pan.baidu.com/s/1AgKxJC9qGmQmujG4lxVKhg" target="_blank" rel="noopener">https://pan.baidu.com/s/1AgKxJC9qGmQmujG4lxVKhg</a><br>提取码: yptm</p></blockquote><p>下载好为 <code>Tampermonkey_v4.5.crx</code></p><ol><li>将后缀改为rar压缩文件，然后解压该文件为文件夹<blockquote><p>接着在谷歌浏览器Chrome里打开右上角的<code>三个竖点</code><br>再点击<code>更多工具</code><br>点击<code>扩展程序</code><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191209175830516.png" class="lazyload"></p></blockquote></li><li>打开<code>开发者模式</code>，点击<code>加载已解压的扩展程序</code><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191209180510480.png" class="lazyload"></li><li>选择刚才解压后的文件夹 <code>Tampermonkey_v4.5</code><br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191209180747460.png" class="lazyload"><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p> 脚本下载地址: <a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">https://greasyfork.org/zh-CN</a><br> <img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191209181143719.png" class="lazyload"></p></blockquote></li></ol><p>然后就可以去搜索自己想用的插件了</p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Tampermonkey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>煤球堆叠问题</title>
      <link href="/2019-12/01/%E7%85%A4%E7%90%83%E5%A0%86%E5%8F%A0%E9%97%AE%E9%A2%98/"/>
      <url>/2019-12/01/%E7%85%A4%E7%90%83%E5%A0%86%E5%8F%A0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="煤球堆叠问题"><a href="#煤球堆叠问题" class="headerlink" title="煤球堆叠问题"></a>煤球堆叠问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>煤球数目</p><p>有一堆煤球，堆成三角棱锥形。具体：<br>第一层放1个，<br>第二层3个（排列成三角形），<br>第三层6个（排列成三角形），<br>第四层10个（排列成三角形），<br>….<br>如果一共有100层，共有多少个煤球？</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><img alt data-src="https://s2.ax1x.com/2019/12/01/QmFmNR.md.png" class="lazyload"></p><p>这里第一层有一颗煤球，第二层放了三颗，第三层放了六颗，其实到这里可以看出每次是扩展了一个三角形的一边。<br>通俗一点讲，第2层加两颗，第3层加三颗，第四层加4颗……第100层就得加100颗</p><p>那么</p><blockquote><p>第一层：1</p><p>第二层：1+2</p><p>第三层：1+2+3</p><p>第四层：1+2+3+4</p><p>…</p><p>第100层：1+2+3+4+…+99+100</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ceng=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    ceng+=i;<span class="comment">//统计每层的个数</span></span><br><span class="line">        sum+=ceng;<span class="comment">//上层加上这层个数 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">171700</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>煤球问题就像是杨辉三角结构一样，不过不同的是他是一个层级关系，堆叠成了一个正三角体(可能这里没有图形比较抽象)，然后将每一层都进行的一个叠加。</p><p>此处应注意每一层的煤球的变化，也同时不能忘记将所有层的煤球进行一个累加</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灵格斯词库安装教程</title>
      <link href="/2019-11/26/english/"/>
      <url>/2019-11/26/english/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="灵格斯【词典21部】安装教程"><a href="#灵格斯【词典21部】安装教程" class="headerlink" title="灵格斯【词典21部】安装教程"></a>灵格斯【词典21部】安装教程</h1><h2 id="解压资源包"><a href="#解压资源包" class="headerlink" title="解压资源包"></a>解压资源包</h2><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/4fae222ef7a13a22.png" class="lazyload"> </p><h2 id="进入文件目录"><a href="#进入文件目录" class="headerlink" title="进入文件目录"></a>进入文件目录</h2><blockquote><p>解压后文件</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/6fcb51ae1df4c6ae.png" class="lazyload"> </p><blockquote><p>点击进入目录，打开标记文件</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/0aba2c28e4108f75.png" class="lazyload"> </p><h2 id="打开程序"><a href="#打开程序" class="headerlink" title="打开程序"></a>打开程序</h2><blockquote><p>打开后如下界面</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/44e2442f715a276d.png" class="lazyload"> </p><blockquote><p>各功能模块</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/a6e9748a986c1030.png" class="lazyload"> </p><h2 id="附件目录工具"><a href="#附件目录工具" class="headerlink" title="附件目录工具"></a>附件目录工具</h2><blockquote><p>有的工具可以使用，按所需</p></blockquote><p><img alt data-src="https://s2.ax1x.com/2019/11/26/QSsy0P.png" class="lazyload"></p><h2 id="取词"><a href="#取词" class="headerlink" title="取词"></a>取词</h2><p>可以通过此开关，将鼠标指向单词，200ms后将会翻译得出该单词释义(<code>不同词典翻译不同</code>)</p><blockquote><p>取词开</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/0573c7c35a07aad8.png" class="lazyload"> </p><blockquote><p>取词关</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/8b5be7ee17723683.png" class="lazyload"> </p><blockquote><p>取词结果</p></blockquote><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/1ecf33e250fed77f.png" class="lazyload"> </p><blockquote><p>好了，快体验词典飞一般的快乐吧！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 词典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微生物增殖问题</title>
      <link href="/2019-11/26/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%A2%9E%E6%AE%96%E9%97%AE%E9%A2%98/"/>
      <url>/2019-11/26/%E5%BE%AE%E7%94%9F%E7%89%A9%E5%A2%9E%E6%AE%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微生物增殖"><a href="#微生物增殖" class="headerlink" title="微生物增殖"></a>微生物增殖</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>假设有两种微生物 X 和 Y<br>X出生后每隔3分钟分裂一次（数目加倍），Y出生后每隔2分钟分裂一次（数目加倍）<br>一个新出生的X，半分钟之后吃掉1个Y，并且，从此开始，每隔1分钟吃1个Y。<br>现在已知有新出生的  X=10，Y=90，求60分钟后Y的数目。</p></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>此处将<code>半分钟（0.5min）</code>转换成<code>一个0.5秒</code>。</p><p><code>一分钟</code>就是<code>2个0.5秒</code>，<code>二分钟</code>就是<code>4个0.5秒</code>，<code>三分钟</code>就是<code>6个0.5秒</code>，<code>60分钟</code>即为<code>120个0.5秒</code></p><table><thead><tr><th align="center">time</th><th align="center">m个0.5秒</th><th align="center">x</th><th align="center">y</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">10</td><td align="center">90</td></tr><tr><td align="center">0.5</td><td align="center">1</td><td align="center">10</td><td align="center">90-10=80</td></tr><tr><td align="center">1</td><td align="center">2</td><td align="center">10</td><td align="center">80</td></tr><tr><td align="center">1.5</td><td align="center">3</td><td align="center">10</td><td align="center">80-10=70</td></tr><tr><td align="center">2</td><td align="center">4</td><td align="center">10</td><td align="center">70*2=140</td></tr><tr><td align="center">2.5</td><td align="center">5</td><td align="center">10</td><td align="center">140-10=130</td></tr><tr><td align="center">3</td><td align="center">6</td><td align="center">10*2=20</td><td align="center">130</td></tr><tr><td align="center">3.5</td><td align="center">7</td><td align="center">20</td><td align="center">130-20=110</td></tr><tr><td align="center">4</td><td align="center">8</td><td align="center">20</td><td align="center">110*2=220</td></tr><tr><td align="center">……</td><td align="center">……</td><td align="center">……</td><td align="center">……</td></tr></tbody></table><p>此处即出现在</p><ul><li>2取余为1时，吃一次Y</li><li>4取余为0时，Y分裂一次</li><li>6取余为0时，X分裂一次</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>代码</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">10</span>,y=<span class="number">90</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">120</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;=<span class="number">0</span>)&#123;<span class="comment">//如果y被吃完了，将不能再吃</span></span><br><span class="line">            y=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)<span class="comment">//y被吃条件</span></span><br><span class="line">            y-=x;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>)<span class="comment">//y分裂条件</span></span><br><span class="line">            y*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">6</span>==<span class="number">0</span>)<span class="comment">//x分裂条件</span></span><br><span class="line">            x*=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"60min后，y生物有%d个\n"</span>,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><blockquote><p>60min后，y生物有<code>94371840</code>个</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>这道题要考虑到x、y的动态变化，此处的半分钟为0.5s要注意进行一个转换，那么可以将60分钟转换为120个0.5秒，也随之将循环次数由60次转换成120次，将0.5成功转换成了1整数，也就解决了整数之间小数的问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly更新部署</title>
      <link href="/2019-11/19/Butterfly-Update/"/>
      <url>/2019-11/19/Butterfly-Update/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Butterfly更新部署"><a href="#Butterfly更新部署" class="headerlink" title="Butterfly更新部署"></a>Butterfly更新部署</h1><blockquote><p>随<a href="https://jerryc.me/posts/21cfbf15" target="_blank" rel="noopener">作者</a>更新以后，在该博客进行了一些同步更新</p></blockquote><h2 id="配置butterfly文件"><a href="#配置butterfly文件" class="headerlink" title="配置butterfly文件"></a>配置butterfly文件</h2><p>将<code>theme/Butterfly</code>下的<code>config.yml</code>复制到<code>sourse/_data</code>下的<code>butterfly.yml</code>文件里，c此后就可以直接配置<code>butterfly</code>可以了，它会替代( <em><code>注：不是替换，通俗讲配置butterfly就有用就可以了</code></em>)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="增加友情链接"><a href="#增加友情链接" class="headerlink" title="增加友情链接"></a>增加友情链接</h3><ul><li>创建友情链接</li></ul><blockquote><p>在 Hexo 博客的根目录<br>输入 <code>hexo new page link</code><br>你会找到<code>source/link/index.md</code>这个文件</p></blockquote><ul><li>修改文件：</li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2019-11-19 08:29:29</span><br><span class="line">type: "link"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>友情链接添加</li></ul><p>在Hexo博客目录中的<code>source/_data</code>，创建一个文件<code>link.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line"><span class="attr">  class_name:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">  link_list:</span></span><br><span class="line">    <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">      link:</span> <span class="attr">https://blog.xxx.com</span></span><br><span class="line"><span class="attr">      avatar:</span> <span class="attr">https://profile.csdnimg.cn/8/3/C/1_qq_38496329</span></span><br><span class="line"><span class="attr">      descr:</span> <span class="string">xxxxxxx</span></span><br><span class="line">    <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">xxxxxx</span></span><br><span class="line"><span class="attr">      link:</span> <span class="attr">https://www.xxxxxxcn/</span></span><br><span class="line"><span class="attr">      avatar:</span> <span class="attr">https://xxxxx/avatar.png</span></span><br><span class="line"><span class="attr">      descr:</span> <span class="string">xxxxxxx</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">class2:</span></span><br><span class="line"><span class="attr">   class_name:</span> <span class="string">链接无效</span></span><br><span class="line"><span class="attr">   link_list:</span></span><br><span class="line">     <span class="number">1</span><span class="string">:</span></span><br><span class="line"><span class="attr">       name:</span> <span class="string">梦xxx</span></span><br><span class="line"><span class="attr">       link:</span> <span class="attr">https://blog.xxx.com</span></span><br><span class="line"><span class="attr">       avatar:</span> <span class="attr">https://xxxx/avatar.png</span></span><br><span class="line"><span class="attr">       descr:</span> <span class="string">xxxx</span></span><br><span class="line">     <span class="number">2</span><span class="string">:</span></span><br><span class="line"><span class="attr">       name:</span> <span class="string">xx</span></span><br><span class="line"><span class="attr">       link:</span> <span class="attr">https://www.axxxx.cn/</span></span><br><span class="line"><span class="attr">       avatar:</span> <span class="attr">https://x</span></span><br><span class="line"><span class="attr">       descr:</span> <span class="string">xx</span></span><br></pre></td></tr></table></figure><ul><li>友情链接界面设置</li></ul><blockquote><p>需要添加友情链接，可以在butterfly.yml配置<br>可在友情链接上写上自己的个人资料，方便其他人添加。</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Flink:</span></span><br><span class="line"><span class="attr">  headline:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">  info_headline:</span> <span class="string">我的Blog资料</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">Blog</span> <span class="string">名字：</span> <span class="string">XJC&amp;BLOG</span></span><br><span class="line"><span class="attr">  address:</span> <span class="string">Blog</span> <span class="string">地址：</span> <span class="attr">https://xjc5772.github.io/</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">Blog</span> <span class="string">头像：</span> <span class="attr">https://profile.csdnimg.cn/8/3/C/1_qq_38496329</span></span><br><span class="line"><span class="attr">  info:</span> <span class="string">Blog</span> <span class="string">简介：</span> <span class="string">多学一点，没什么不好的</span></span><br><span class="line"><span class="attr">  comment:</span> <span class="string">如果需要交换友链,请留言</span></span><br></pre></td></tr></table></figure><h3 id="代码复制功能"><a href="#代码复制功能" class="headerlink" title="代码复制功能"></a>代码复制功能</h3><p>主题支持代码复制功能</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img alt="代码复制" data-src="https://ftp.bmp.ovh/imgs/2019/11/8cb4589a51ede654.png" class="lazyload"></p><h3 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开/关闭"></a>代码框展开/关闭</h3><p>配置<code>butterfly.yml</code></p><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击标记处可展开代码</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 '&gt;' 打开</span></span><br></pre></td></tr></table></figure><h4 id="代码框关闭"><a href="#代码框关闭" class="headerlink" title="代码框关闭"></a>代码框关闭</h4><p><code>highlight_shrink: true</code> <img alt="代码框关闭" data-src="https://ftp.bmp.ovh/imgs/2019/11/53365a2bdcbecb5f.png" class="lazyload"> </p><h4 id="代码框展开"><a href="#代码框展开" class="headerlink" title="代码框展开"></a>代码框展开</h4><p><code>highlight_shrink: false</code> <img alt="代码框展开" data-src="https://ftp.bmp.ovh/imgs/2019/11/443ef181d67a01d3.png" class="lazyload"> </p><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p>在默认情况下，<code>hexo-highlight</code>在编译的时候不会实现代码自动换行。如果你不希望在代码块的区域里有横向滚动条的话，那么你可以考虑开启这个功能。</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure><blockquote><p>设置code_word_wrap之前(没有那么长的图，借用作者的):</p></blockquote><h4 id="代码换行前"><a href="#代码换行前" class="headerlink" title="代码换行前"></a>代码换行前</h4><p><img alt="代码换行前" data-src="https://ftp.bmp.ovh/imgs/2019/11/ea5572c6e0bc3fb7.png" class="lazyload"> </p><blockquote><p>设置code_word_wrap之后(同上):blonde_woman:</p></blockquote><h4 id="代码换行后"><a href="#代码换行后" class="headerlink" title="代码换行后"></a>代码换行后<img alt="代码换行后" data-src="https://ftp.bmp.ovh/imgs/2019/11/766c6df7661395c3.png" class="lazyload"></h4><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p><code>Butterfly</code>支持 <a href="https://fontawesome.com/v4.7.0/" target="_blank" rel="noopener"><code>font-awesome v4</code></a>和 <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener"><code>font-awesome v5</code></a>. 如需开启<code>font-awesome v5</code>,需要在<code>butterfly.yml</code>上开启</p><blockquote><p>此处我用的<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener"><code>font-awesome v5</code></a></p><p>配置<code>butterfly.yml</code></p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">CDN_USE:</span></span><br><span class="line"><span class="attr">  css:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/css/index.css</span></span><br><span class="line"><span class="attr">    - https:</span><span class="string">//cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css</span></span><br><span class="line"><span class="attr">    - https:</span><span class="string">//use.fontawesome.com/releases/v5.8.1/css/all.css</span> <span class="comment">#fontawesomeV5_css</span></span><br></pre></td></tr></table></figure><blockquote><p>无论V4还是V5,书写格式都是一样的图标名：url</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="string">fa</span> <span class="attr">fa-github:</span> <span class="attr">https://github.com/jerryc127</span></span><br><span class="line">  <span class="string">fa</span> <span class="attr">fa-rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><h2 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h2><blockquote><p>此处额外谈一点，重新认识了一篇文章的那么多属性，下面我将逐一认识</p></blockquote><hr><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">layout:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo文章的发布</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-10</span><span class="bullet">-28</span> <span class="number">20</span><span class="string">:37:17</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">异常处理</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">'Hexo,异常处理'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">对Hexo博客搭建的一些简单记录，已经对一些坑进行填埋</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="number">46</span><span class="string">be9372</span></span><br><span class="line"><span class="attr">cover:</span> <span class="attr">https://source.unsplash.com/collection/collectionid/1600x900</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="attr">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</span></span><br></pre></td></tr></table></figure><h3 id="文章标题：title"><a href="#文章标题：title" class="headerlink" title="文章标题：title"></a>文章标题：title</h3><blockquote><p>title: Hexo文章的发布</p></blockquote><h3 id="创建时间：date"><a href="#创建时间：date" class="headerlink" title="创建时间：date"></a>创建时间：date</h3><blockquote><p>date: 2019-10-28 20:37:17</p></blockquote><h3 id="创建分类：categories"><a href="#创建分类：categories" class="headerlink" title="创建分类：categories"></a>创建分类：categories</h3><blockquote><p>categories: Hexo</p></blockquote><p> <img alt="title,date,categories" data-src="https://ftp.bmp.ovh/imgs/2019/11/ff77f655f8481d14.png" class="lazyload"> </p><h3 id="创建标签：tags"><a href="#创建标签：tags" class="headerlink" title="创建标签：tags"></a>创建标签：tags</h3><blockquote><p>tags:</p><p>​    - Hexo</p><p>​    - 异常处理</p></blockquote><p> <img alt="tags" data-src="https://ftp.bmp.ovh/imgs/2019/11/5a25aab39c889f60.png" class="lazyload"> </p><h3 id="创建描述：description"><a href="#创建描述：description" class="headerlink" title="创建描述：description"></a>创建描述：description</h3><p>因为主题UI的关系，主页文章节选只支持自动节选和文章页<code>description</code>。优先选择自动节选。</p><p>在<code>butterfly.yml</code>里可以开启<code>auto_excerpt</code>的选项，你的文章将会在自动截取部分显示在主页。（默认显示150个字）。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>如果没有开启自动节选，则会显示文章页<code>front-matter</code>里面设置的<code>description</code>。</p><p> <img alt="description" data-src="https://ftp.bmp.ovh/imgs/2019/11/baed3dcf3dad3eba.png" class="lazyload"> </p><p>我是将<code>自动节选</code>给关闭了的，就会显示我的<code>description</code>里的内容</p><p><img alt="description" data-src="https://ftp.bmp.ovh/imgs/2019/11/b621387b673c216a.png" class="lazyload"> </p><h3 id="创建封面图：cover"><a href="#创建封面图：cover" class="headerlink" title="创建封面图：cover"></a>创建封面图：cover</h3><h4 id="默认文章封面"><a href="#默认文章封面" class="headerlink" title="默认文章封面"></a>默认文章封面</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_cover:</span> <span class="attr">https://xxx.png</span> <span class="comment">#默认图片地址</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不配置cover,可以设置显示默认的cover</p></blockquote><h4 id="自定义文章封面"><a href="#自定义文章封面" class="headerlink" title="自定义文章封面"></a>自定义文章封面</h4><p>配置<code>文章.md</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span> <span class="attr">https://images.unsplash.com/photo-1572557347335-f6e9500ede25?crop=entropy&amp;cs=tinysrgb&amp;fit=crop&amp;fm=jpg&amp;h=900&amp;ixid=eyJhcHBfaWQiOjF9&amp;ixlib=rb-1.2.1&amp;q=80&amp;w=1600</span></span><br></pre></td></tr></table></figure><p><img alt="cover自定义" data-src="https://i.loli.net/2019/11/19/NxPHtLhIDkWQi7v.png" class="lazyload"></p><h4 id="配置page主页图"><a href="#配置page主页图" class="headerlink" title="配置page主页图"></a>配置page主页图</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_top_img:</span> <span class="attr">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</span></span><br></pre></td></tr></table></figure><blockquote><p>此处使用了随机图片，作为首页图，每次进入将会不一样</p><p>当顶部图留空，true和false<br>主页会显示纯颜色的顶部图</p><p>其他page的顶部图没有设置时，也会显示纯颜色的顶部</p></blockquote><p><img alt="page随机图0" data-src="https://i.loli.net/2019/11/19/CA6OXrysvQG7n2V.png" class="lazyload"></p><p><img alt="page随机图1" data-src="https://i.loli.net/2019/11/19/IRX5nZhFUp9zw6B.png" class="lazyload"></p><h4 id="配置顶部图"><a href="#配置顶部图" class="headerlink" title="配置顶部图"></a>配置顶部图</h4><h4 id="配置文章顶部图"><a href="#配置文章顶部图" class="headerlink" title="配置文章顶部图"></a>配置文章顶部图</h4><p>配置<code>文章.md</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">top_img:</span> <span class="attr">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</span></span><br></pre></td></tr></table></figure><p><img alt="top_img自定义" data-src="https://i.loli.net/2019/11/19/6mubcqTKBREhNd4.png" class="lazyload"></p><h4 id="配置archive顶部图"><a href="#配置archive顶部图" class="headerlink" title="配置archive顶部图"></a>配置archive顶部图</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">archive_img:</span> <span class="attr">https://i.loli.net/2019/11/19/XlPxSY2O9NUDvjf.jpg</span></span><br></pre></td></tr></table></figure><h4 id="配置tag顶部图"><a href="#配置tag顶部图" class="headerlink" title="配置tag顶部图"></a>配置tag顶部图</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_img:</span> <span class="attr">https://i.loli.net/2019/11/19/XlPxSY2O9NUDvjf.jpg</span></span><br></pre></td></tr></table></figure><h4 id="配置category顶部图"><a href="#配置category顶部图" class="headerlink" title="配置category顶部图"></a>配置category顶部图</h4><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">category_img:</span> <span class="attr">https://i.loli.net/2019/11/19/XlPxSY2O9NUDvjf.jpg</span></span><br></pre></td></tr></table></figure><h3 id="配置文章相关信息"><a href="#配置文章相关信息" class="headerlink" title="配置文章相关信息"></a>配置文章相关信息</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  date_type:</span> <span class="string">both</span> <span class="comment"># or created or updated 文章日期是创建日或者更新日或都显示</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span> <span class="comment"># or false 是否显示分类</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="literal">true</span> <span class="comment"># or false 是否显示标签</span></span><br></pre></td></tr></table></figure><h3 id="配置悬赏"><a href="#配置悬赏" class="headerlink" title="配置悬赏"></a>配置悬赏</h3><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  QR_code:</span></span><br><span class="line"><span class="attr">    - itemlist:</span></span><br><span class="line"><span class="attr">        img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line"><span class="attr">        text:</span> <span class="string">微信</span></span><br><span class="line"><span class="attr">    - itemlist:</span></span><br><span class="line"><span class="attr">        img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line"><span class="attr">        text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><h3 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h3><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="attr">https://i.loli.net/2019/11/19/y9F2N5EaYASTzvR.jpg</span></span><br></pre></td></tr></table></figure><p><img alt="avatar头像" data-src="https://i.loli.net/2019/11/19/8hRXAJO4UFy1pNW.png" class="lazyload"></p><h3 id="配置相关文章"><a href="#配置相关文章" class="headerlink" title="配置相关文章"></a>配置相关文章</h3><p>相关文章推荐的原理是根据文章tags的比重来推荐</p><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">3</span> <span class="comment"># 显示推荐文章数目</span></span><br></pre></td></tr></table></figure><p><img alt="相关文章" data-src="https://i.loli.net/2019/11/19/hyQIFO5M1LZbNEY.png" class="lazyload"></p><h3 id="配置运行时间"><a href="#配置运行时间" class="headerlink" title="配置运行时间"></a>配置运行时间</h3><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  start_date:</span> <span class="number">10</span><span class="string">/21/2019</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure><h3 id="配置评论-Valine"><a href="#配置评论-Valine" class="headerlink" title="配置评论(Valine)"></a>配置评论(Valine)</h3><p>配置<code>butterfly.yml</code></p><p>此处先到<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">Valine</a>登录后创建应用，获取<code>appID</code>与<code>appkey</code>，参考官方文档，将其复制到<code>appId</code>与<code>appKey</code>处，修改<code>enable</code>为<code>true</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># if you want use valine,please set this value is true</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="string">zeWPXXXXXXXXXXXXXXXXXXXXXXXoHsz</span> <span class="comment"># leancloud application app id</span></span><br><span class="line"><span class="attr">  appKey:</span> <span class="string">EpwGoXXXXXXXXXXXXXXXXNWRpW2V</span> <span class="comment"># leancloud application app key</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># valine mail notify (true/false) </span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># valine verify code (true/false)</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">7</span> <span class="comment"># comment list page size</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line"><span class="attr">  lang:</span> <span class="string">zh-cn</span> <span class="comment"># i18n: zh-cn/en</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Please</span> <span class="string">leave</span> <span class="string">your</span> <span class="string">footprints</span> <span class="comment"># 预输入</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header info</span></span><br><span class="line"><span class="attr">  bg:</span> <span class="string">/img/comment_bg.png</span> <span class="comment"># valine background</span></span><br></pre></td></tr></table></figure><blockquote><p>官方文档中还有头像配置与邮箱提醒等配置，这里不做更多的详解，可以自己到<a href="https://valine.js.org/notify.html" target="_blank" rel="noopener">Valine官网</a>去查看</p></blockquote><h3 id="配置搜索"><a href="#配置搜索" class="headerlink" title="配置搜索"></a>配置搜索</h3><h4 id="配置本地搜索"><a href="#配置本地搜索" class="headerlink" title="配置本地搜索"></a>配置本地搜索</h4><p>首先需要安装 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>. 根据它的文档去做相应配置。注意格式只支持 xml </p><p>安装<code>hexo-generator-search</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line"><span class="attr">    hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span> <span class="comment"># if there are no result</span></span><br></pre></td></tr></table></figure><p> <img alt data-src="https://ftp.bmp.ovh/imgs/2019/11/45ab9dcf0c05da63.png" class="lazyload"> </p><h3 id="UI特效页面配置"><a href="#UI特效页面配置" class="headerlink" title="UI特效页面配置"></a>UI特效页面配置</h3><p>配置<code>butterfly.yml</code></p><h4 id="配置主题色"><a href="#配置主题色" class="headerlink" title="配置主题色"></a>配置主题色</h4><blockquote><p>颜色值必须被双引号包裹，就像”#000”而不是#000。否则将会在构建的时候报错！</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  main:</span> <span class="string">"#9370DB"</span></span><br><span class="line"><span class="attr">  paginator:</span> <span class="string">"#7A7FF1"</span></span><br><span class="line"><span class="attr">  button_hover:</span> <span class="string">"#FF7242"</span></span><br><span class="line"><span class="attr">  text_selection:</span> <span class="string">"#69c46d"</span></span><br><span class="line"><span class="attr">  link_color:</span> <span class="string">"#858585"</span></span><br><span class="line"><span class="attr">  hr_color:</span> <span class="string">"#A4D8FA"</span></span><br><span class="line"><span class="attr">  read-mode-bg_color:</span> <span class="string">'#FAF9DE'</span></span><br></pre></td></tr></table></figure><h4 id="配置背景"><a href="#配置背景" class="headerlink" title="配置背景"></a>配置背景</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片格式 background: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="comment"># 顔色 background: '#49B202'</span></span><br><span class="line"><span class="comment"># 留空 显示白色</span></span><br><span class="line"><span class="attr">background:</span> <span class="comment">#此处可以是背景色，也可以是图片路径</span></span><br></pre></td></tr></table></figure><h4 id="配置footer"><a href="#配置footer" class="headerlink" title="配置footer"></a>配置footer</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(与top_img一致)</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="配置打字效果"><a href="#配置打字效果" class="headerlink" title="配置打字效果"></a>配置打字效果</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打字效果</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="配置背景彩带"><a href="#配置背景彩带" class="headerlink" title="配置背景彩带"></a>配置背景彩带</h4><h5 id="静态彩带"><a href="#静态彩带" class="headerlink" title="静态彩带"></a>静态彩带</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  size:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">  alpha:</span> <span class="number">0.6</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">  click_to_change:</span> <span class="literal">false</span>  <span class="comment">#设置是否每次点击都更换彩带</span></span><br><span class="line"><span class="attr">  mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span><br></pre></td></tr></table></figure><h5 id="动态彩带"><a href="#动态彩带" class="headerlink" title="动态彩带"></a>动态彩带</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon_piao:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mobile:</span> <span class="literal">false</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span><br></pre></td></tr></table></figure><h4 id="配置背景nest"><a href="#配置背景nest" class="headerlink" title="配置背景nest"></a>配置背景nest</h4><blockquote><p>canvas-nest</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  color:</span> <span class="string">'0,0,255'</span> <span class="comment">#color of lines, default: '0,0,0'; RGB values: (R,G,B).(note: use ',' to separate.)</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">0.7</span> <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span><br><span class="line"><span class="attr">  zIndex:</span> <span class="bullet">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">99</span> <span class="comment"># the number of lines, default: 99.</span></span><br><span class="line"><span class="attr">  mobile:</span> <span class="literal">true</span> <span class="comment"># false 手机端不显示 true 手机端显示</span></span><br></pre></td></tr></table></figure><h4 id="配置点击效果"><a href="#配置点击效果" class="headerlink" title="配置点击效果"></a>配置点击效果</h4><h5 id="爆炸泡泡"><a href="#爆炸泡泡" class="headerlink" title="爆炸泡泡"></a>爆炸泡泡</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fireworks:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击出现爱心</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="富强民主"><a href="#富强民主" class="headerlink" title="富强民主"></a>富强民主</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击出现文字，文字可自行修改</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  text:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">富强</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">民主</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">文明</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">和谐</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">自由</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">平等</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">公正</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">法治</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">爱国</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">敬业</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">诚信</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">友善</span></span><br><span class="line"><span class="attr">  fontSize:</span> <span class="number">15</span><span class="string">px</span></span><br></pre></td></tr></table></figure><h4 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主页subtitle</span></span><br><span class="line"><span class="comment"># 打字效果</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source调用第三方服务</span></span><br><span class="line">  <span class="comment"># source: false 关闭调用 </span></span><br><span class="line">  <span class="comment"># source: 1  调用金山词霸的每日一句（简体）</span></span><br><span class="line">  <span class="comment"># source: 2  调用一言网的一句话（简体） #https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 3  调用一句网（简体） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 4  调用今日诗词（简体） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 会先显示 source , 再显示 sub 的内容</span></span><br><span class="line"><span class="attr">  source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># (如果有英文逗号' , '，请使用转义字符 &amp;#44;)</span></span><br><span class="line"><span class="attr">  sub:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">共眠一舸听秋雨&amp;#44;小簟轻衾各自寒</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Sleep</span> <span class="string">together</span> <span class="string">and</span> <span class="string">listen</span> <span class="string">to</span> <span class="string">the</span> <span class="string">autumn</span> <span class="string">rain</span></span><br></pre></td></tr></table></figure><h4 id="配置字数统计"><a href="#配置字数统计" class="headerlink" title="配置字数统计"></a>配置字数统计</h4><blockquote><p>安装配置</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>配置<code>butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="配置-Snackbar-弹窗"><a href="#配置-Snackbar-弹窗" class="headerlink" title="配置 Snackbar 弹窗"></a>配置 Snackbar 弹窗</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Snackbar 彈窗</span></span><br><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="comment"># position 彈窗位置</span></span><br><span class="line"><span class="comment"># 可選 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line"><span class="attr">snackbar:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  position:</span> <span class="string">bottom-left</span></span><br><span class="line"><span class="attr">  bg_light:</span> <span class="string">'#49b1f5'</span> <span class="comment">#light mode時彈窗背景</span></span><br><span class="line"><span class="attr">  bg_dark:</span> <span class="string">'#2d3035'</span> <span class="comment">#dark mode時彈窗背景</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo主题 </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2019-10/29/MarkdownGrammar/"/>
      <url>/2019-10/29/MarkdownGrammar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h2 id="0-特殊字符"><a href="#0-特殊字符" class="headerlink" title="(0) 特殊字符"></a>(0) 特殊字符</h2><p>Markdown对特殊字符处理不是很友好,很容易出现很奇怪的异常,其实就是因为文章中包含了特殊字符无法编译通过导致Hexo无法渲染<br>在写博客时,一定注意不要写这些字符,如果要写,就进行转义<br>有些人可能说可以使用反斜杠 \ 来处理,我这里不建议,因为我使用的时候没有解决问题。<br>下面是比较常见的几个:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! &amp;<span class="comment">#33; — 惊叹号Exclamation mark </span></span><br><span class="line">” &amp;<span class="comment">#34; &amp;quot; 双引号Quotation mark </span></span><br><span class="line"><span class="comment"># &amp;#35; — 数字标志Number sign </span></span><br><span class="line">$ &amp;<span class="comment">#36; — 美元标志Dollar sign </span></span><br><span class="line">% &amp;<span class="comment">#37; — 百分号Percent sign </span></span><br><span class="line">&amp; &amp;<span class="comment">#38; &amp;amp; Ampersand </span></span><br><span class="line">‘ &amp;<span class="comment">#39; — 单引号Apostrophe </span></span><br><span class="line">( &amp;<span class="comment">#40; — 小括号左边部分Left parenthesis </span></span><br><span class="line">) &amp;<span class="comment">#41; — 小括号右边部分Right parenthesis </span></span><br><span class="line">* &amp;<span class="comment">#42; — 星号Asterisk </span></span><br><span class="line">+ &amp;<span class="comment">#43; — 加号Plus sign </span></span><br><span class="line">&lt; &amp;<span class="comment">#60; &amp;lt; 小于号Less than </span></span><br><span class="line">= &amp;<span class="comment">#61; — 等于符号Equals sign </span></span><br><span class="line">&gt; &amp;<span class="comment">#62; &amp;gt; 大于号Greater than </span></span><br><span class="line">? &amp;<span class="comment">#63; — 问号Question mark </span></span><br><span class="line">@ &amp;<span class="comment">#64; — Commercial at </span></span><br><span class="line">[ &amp;<span class="comment">#91; --- 中括号左边部分Left square bracket </span></span><br><span class="line">\ &amp;<span class="comment">#92; --- 反斜杠Reverse solidus (backslash) </span></span><br><span class="line">] &amp;<span class="comment">#93; — 中括号右边部分Right square bracket </span></span><br><span class="line">&#123; &amp;<span class="comment">#123; — 大括号左边部分Left curly brace </span></span><br><span class="line">| &amp;<span class="comment">#124; — 竖线Vertical bar </span></span><br><span class="line">&#125; &amp;<span class="comment">#125; — 大括号右边部分Right curly brace</span></span><br></pre></td></tr></table></figure><blockquote><p>特别注意的是小括号 ( ) 大括号 { } ,如果不小心写了,你执行hexo s –debug可能报一些莫名其妙的错误!<br><a href="http://www.cnblogs.com/xcsn/p/3559624.html" target="_blank" rel="noopener">这里还有更多关于特殊字符如何转义的内容</a></p></blockquote><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="(1) 标题"></a>(1) 标题</h2><p>在文字前加上#号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br><span class="line"># 大标题</span><br><span class="line"></span><br><span class="line">## 小标题</span><br></pre></td></tr></table></figure><p>预览效果：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><h2 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h2><h2 id="粗体斜体"><a href="#粗体斜体" class="headerlink" title="粗体斜体"></a>粗体斜体</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*    _斜体文本_</span><br><span class="line">**粗体文本**    __粗体文本__</span><br><span class="line">***粗斜体文本***    ___粗斜体文本___123</span><br></pre></td></tr></table></figure><p>预览效果：<br><em>斜体文本</em> <em>斜体文本</em><br><strong>粗体文本</strong> <strong>粗体文本</strong></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用链接方法</span><br><span class="line">文字链接 [链接名称](https://xjc5772.github.io)</span><br><span class="line">网址链接 &lt;https://xjc5772.github.io&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">高级链接技巧</span><br><span class="line">这个链接用 1 作为网址变量 [Google][1].</span><br><span class="line">这个链接用 baidu 作为网址变量 [Baidu!][baidu].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [Baidu]: http://www.baidu.com/</span><br></pre></td></tr></table></figure><p>预览效果：<br>文字链接 <a href="http://https://xjc5772.github.io/" target="_blank" rel="noopener">链接名称</a><br>网址链接 <a href="http://https://xjc5772.github.io/" target="_blank" rel="noopener">http://https://xjc5772.github.io</a></p><p>高级链接技巧<br>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a>.<br>这个链接用 yahoo 作为网址变量 <a href="http://www.baidu.com/" target="_blank" rel="noopener">Baidu!</a>.</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>普通无序列表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表文本前使用 [减号+空格]</span><br><span class="line">+ 列表文本前使用 [加号+空格]</span><br><span class="line">* 列表文本前使用 [星号+空格]123</span><br></pre></td></tr></table></figure><p>普通有序列表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列表前使用 [数字+空格]</span><br><span class="line">2. 我们会自动帮你添加数字</span><br></pre></td></tr></table></figure><p>列表嵌套</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列出所有元素：</span><br><span class="line">    - 无序列表元素 A</span><br><span class="line">        1. 元素 A 的有序子列表</span><br><span class="line">    - 前面加四个空格</span><br><span class="line">2. 列表里的多段换行：</span><br><span class="line">    前面必须加四个空格，</span><br><span class="line">    这样换行，整体的格式不会乱</span><br><span class="line">3. 列表里引用：</span><br><span class="line"></span><br><span class="line">    &gt; 前面空一行</span><br><span class="line">    &gt; 仍然需要在 &gt;  前面加四个空格</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>普通引用</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用文本前使用 [大于号+空格]</span><br><span class="line">&gt; 折行可以不加，新起一行都要加上哦12</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>引用里嵌套引用</p></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 最外层引用</span><br><span class="line">&gt; &gt; 多一个 &gt; 嵌套一层引用</span><br><span class="line">&gt; &gt; &gt; 可以嵌套很多层123</span><br></pre></td></tr></table></figure><blockquote><ul><li><blockquote><ul><li>引用里嵌套列表</li></ul></blockquote></li></ul></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; - 这是引用里嵌套的一个列表</span><br><span class="line">&gt; - 还可以有子列表</span><br><span class="line">&gt;     * 子列表需要从 - 之后延后四个空格开始123</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片名称](/图片地址)</span><br><span class="line">不过，也可以像网址那样对图片网址使用变量</span><br><span class="line"></span><br><span class="line">这个链接用 1 作为网址变量 [ Google] [ 1].</span><br><span class="line">然后在文档的结尾位变量赋值(网址)</span><br><span class="line">[1]: http: //www.google.com/logo.png</span><br></pre></td></tr></table></figure><p><img alt="logo" data-src="https://avatar.csdnimg.cn/8/3/C/1_qq_38496329.jpg" class="lazyload"></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>如果另起一行，只需在当前行结尾加 2 个空格</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在当前行的结尾加 2 个空格  </span><br><span class="line">这行就会新起一行</span><br><span class="line">如果是要起一个新段落，只需要空出一行即可。123</span><br></pre></td></tr></table></figure><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><p>如果你有写分割线的习惯，可以新起一行输入三个减号-。当前后都有段落时，请空出一行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前面的段落</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">后面的段落</span><br></pre></td></tr></table></figure><h2 id="小型文本"><a href="#小型文本" class="headerlink" title="小型文本"></a>小型文本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;small&gt;文本内容&lt;/small&gt;</span><br></pre></td></tr></table></figure><p>预览效果：<br>我是正常文字<br><small>我是小型文字</small></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown的扩展语法，hexo已经支持</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 布局           | 路径                 |</span><br><span class="line">| ------------- |:-------------------:|</span><br><span class="line">| post          | source/_posts   |  </span><br><span class="line">| page          | source           | </span><br><span class="line">| draft          | source/_drafts   |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章的发布</title>
      <link href="/2019-10/28/issue/"/>
      <url>/2019-10/28/issue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo文章发布"><a href="#Hexo文章发布" class="headerlink" title="Hexo文章发布"></a>Hexo文章发布</h1><h2 id="文章创建"><a href="#文章创建" class="headerlink" title="文章创建"></a>文章创建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此处<code>layout</code>可以选择，也可以不选择。</p><ul><li><code>layout</code>指定文章的布局，默认<code>Post</code> ，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局 </li></ul></blockquote><blockquote><p> 此命令会在/source/_posts下创建一个文件名 <code>title.md</code>文件，然后就可以使用<code>markdown</code>编辑器开始写自己的博客了。</p><ul><li>那么文章编辑语法可以遵循<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">markdownd</a>的语法</li></ul></blockquote><ul><li>打开生成的模板文章文件</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">new</span> <span class="string">post</span> <span class="comment">#博客标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-10</span><span class="bullet">-28</span> <span class="number">21</span><span class="string">:20:57</span> <span class="comment">#创建时间</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">java</span> <span class="comment">#标签</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="模板配置（Scaffold）"><a href="#模板配置（Scaffold）" class="headerlink" title="模板配置（Scaffold）"></a>模板配置（Scaffold）</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr><tr><td align="left"><code>keywords</code></td><td align="left">仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td align="left"></td></tr></tbody></table><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><p>更多文章编辑可参考<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">官网文档</a></p><h2 id="文章发布异常处理"><a href="#文章发布异常处理" class="headerlink" title="文章发布异常处理"></a>文章发布异常处理</h2><h3 id="无法处理now函数异常"><a href="#无法处理now函数异常" class="headerlink" title="无法处理now函数异常"></a>无法处理<strong>now</strong>函数异常</h3><h4 id="异常内容"><a href="#异常内容" class="headerlink" title="异常内容"></a>异常内容</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Error:</span> <span class="string">Unable</span> <span class="string">to</span> <span class="string">call</span> <span class="string">`now`,</span> <span class="string">which</span> <span class="string">is</span> <span class="string">undefined</span> <span class="string">or</span> <span class="string">falsey</span></span><br><span class="line"><span class="string">Template</span> <span class="string">render</span> <span class="attr">error:</span> <span class="string">(unknown</span> <span class="string">path)</span> <span class="string">[Line</span> <span class="number">3</span><span class="string">,</span> <span class="string">Column</span> <span class="number">253</span><span class="string">]</span></span><br><span class="line"><span class="attr">Error:</span> <span class="string">Unable</span> <span class="string">to</span> <span class="string">call</span> <span class="string">`now`,</span> <span class="string">which</span> <span class="string">is</span> <span class="string">undefined</span> <span class="string">or</span> <span class="string">falsey</span></span><br></pre></td></tr></table></figure><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><blockquote><p>这种一般是文章中使用了now( )，<code>小括号()</code>属于特殊字符,在编译文章时将now( )当函数处理了,结果找不到函数,就报错了。 </p></blockquote><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote><p> 将小括号通过<code>&amp;#40;</code>与<code>&amp;#41;</code> 进行转换为<code>小括号()</code></p></blockquote><h3 id="意外的函数体异常"><a href="#意外的函数体异常" class="headerlink" title="意外的函数体异常"></a>意外的函数体异常</h3><h4 id="异常内容-1"><a href="#异常内容-1" class="headerlink" title="异常内容"></a>异常内容</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">FATAL</span> <span class="string">(unknown</span> <span class="string">path)</span> <span class="string">[Line</span> <span class="number">14</span><span class="string">,</span> <span class="string">Column</span> <span class="number">6</span><span class="string">]</span></span><br><span class="line">  <span class="string">unexpected</span> <span class="attr">token:</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="string">Template</span> <span class="string">render</span> <span class="attr">error:</span> <span class="string">(unknown</span> <span class="string">path)</span> <span class="string">[Line</span> <span class="number">14</span><span class="string">,</span> <span class="string">Column</span> <span class="number">6</span><span class="string">]</span></span><br><span class="line">  <span class="string">unexpected</span> <span class="attr">token:</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><blockquote><p> 这类异常一般是文章中使用了<code>大括号 {}</code> ，这很容易被判断为函数或者语句块儿的开始或者结尾，而导致编译不通过。</p></blockquote><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote><p> 将大括号的通过<code>&amp;#123;</code>与<code>&amp;#125;</code>进行转换为<code>大括号{}</code></p></blockquote><h2 id="如何删除文章"><a href="#如何删除文章" class="headerlink" title="如何删除文章"></a>如何删除文章</h2><p>删除文章的很简单，先删除本地文件，然后通过生成和部署命令进而将远程仓库中的文件也一并删除。具体来说，以最开始默认形成的helloworld.md这篇文章为例。</p><blockquote><p>首先进入到source / _post 文件夹中，找到helloworld.md文件，在本地直接执行删除。然后依次执行<code>hexo g</code>，<code>hexo d</code>，再去主页查看你就会发现你的博客上面已经空空如也了，这就是如何删除文章的方法。</p></blockquote><hr><p>上述的各类异常可以参考<a href="https://xjc5772.github.io/2019/10/29/MarkdownGrammar/">Markdown语法特殊字符处理</a>总之，注意小心这些特殊字符，Hexo有点恶心的就在此处，有的该转义转义，该标记标记，能避免的避免特殊字符，祝大家都顺顺利利的跑起来啊</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题安装与配置</title>
      <link href="/2019-10/27/Hexo%20theme/"/>
      <url>/2019-10/27/Hexo%20theme/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo主题安装与配置"><a href="#Hexo主题安装与配置" class="headerlink" title="Hexo主题安装与配置"></a>Hexo主题安装与配置</h1><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>　Hexo初始化之后默认的主题是<code>landscape</code>，当然，如果想要更换自己喜欢的主题，可以在Hexo官方给出的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>中挑选喜欢的主题文件，点进去后还可以看见其中具体样式以作参考，随后在GitHub中搜索你要的主题名称，里面都会有该主题的如何使用的介绍。</p><blockquote><p>以下操作都得在博客的根目录进行安装</p></blockquote><p>此处以<code>butterfly</code>为例</p><h3 id="挑选主题"><a href="#挑选主题" class="headerlink" title="挑选主题"></a>挑选主题</h3><ul><li><p>到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo</a>官网看了下<code>butterfly</code>的样式，emm，还是很不错的，就它了</p><p>![挑选butterfly主题](./hexo theme/select_butterfly.png)</p></li></ul><blockquote><p>于是我点进去看了下…emm，很好看，就它了</p></blockquote><h3 id="搜寻主题"><a href="#搜寻主题" class="headerlink" title="搜寻主题"></a>搜寻主题</h3><blockquote><p>到GitHub里去搜索<code>Butterfly</code></p></blockquote><p>![GitHub-butterfly](./hexo theme/select_butterfly.png)</p><blockquote><p>直接点进去</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>![butterfly-安装](./hexo theme/butterfly_install.png)</p><h3 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h3><ul><li><p>安装渲染器（然后你会等很久很久，看部复联4吧🤭）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p></li></ul><blockquote><p> 修改hexo配置文件<code>_config.yml</code>，把主题替换<code>Butterfly</code> </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure></blockquote><ul><li>然后三步走</li></ul><blockquote><ol><li>hexo clean</li><li>hexo g</li><li>hexo d</li></ol></blockquote><h1 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h1><h2 id="桃心点击效果"><a href="#桃心点击效果" class="headerlink" title="桃心点击效果"></a>桃心点击效果</h2><ul><li>在<code>/themes/*/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把以下粘贴到<code>clicklove.js</code>文件中。 </li></ul><blockquote><p>注：此处 * 表示任意的主题文件目录，例如<code>/themes/butterfly/source/js/src</code></p></blockquote><ul><li>在<code>\themes\*\layout\_layout.swig</code>文件末尾添加</li></ul><h3 id="clicklove代码："><a href="#clicklove代码：" class="headerlink" title="clicklove代码："></a>clicklove代码：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 爱心特效 */</span></span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; s.length; e++) s[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(s[e].el), s.splice(e, <span class="number">1</span>)) : (s[e].y--, s[e].scale += <span class="number">.004</span>, s[e].alpha -= <span class="number">.013</span>, s[e].el.style.cssText = <span class="string">"left:"</span> + s[e].x + <span class="string">"px;top:"</span> + s[e].y + <span class="string">"px;opacity:"</span> + s[e].alpha + <span class="string">";transform:scale("</span> + s[e].scale + <span class="string">","</span> + s[e].scale + <span class="string">") rotate(45deg);background:"</span> + s[e].color + <span class="string">";z-index:99999"</span>);</span><br><span class="line">    requestAnimationFrame(r)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">"function"</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;</span><br><span class="line">    e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      t &amp;&amp; t(), o(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.createElement(<span class="string">"div"</span>);</span><br><span class="line">    a.className = <span class="string">"heart"</span>, s.push(&#123;</span><br><span class="line">      el: a,</span><br><span class="line">      x: e.clientX - <span class="number">5</span>,</span><br><span class="line">      y: e.clientY - <span class="number">5</span>,</span><br><span class="line">      scale: <span class="number">1</span>,</span><br><span class="line">      alpha: <span class="number">1</span>,</span><br><span class="line">      color: c()</span><br><span class="line">    &#125;), t.body.appendChild(a)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.createElement(<span class="string">"style"</span>);</span><br><span class="line">    a.type = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      a.appendChild(t.createTextNode(e))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">      a.styleSheet.cssText = e</span><br><span class="line">    &#125;</span><br><span class="line">    t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> s = [];</span><br><span class="line">  e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    setTimeout(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">  &#125;, i(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>), n(), r()</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure> <!-- 页面点击小红心 --><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="例图："><a href="#例图：" class="headerlink" title="例图："></a>例图：</h3><p>![小红心点击效果](./hexo theme/click_love.png)</p><h2 id="富强-民主点击效果"><a href="#富强-民主点击效果" class="headerlink" title="富强/民主点击效果"></a>富强/民主点击效果</h2><h3 id="clicksocialvalue代码："><a href="#clicksocialvalue代码：" class="headerlink" title="clicksocialvalue代码："></a>clicksocialvalue代码：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 社会主体核心价值观效果 */</span></span><br><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span>, <span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">      y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      <span class="string">"z-index"</span>: <span class="number">100000000</span>,</span><br><span class="line">      <span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line">      <span class="string">"left"</span>: x,</span><br><span class="line">      <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">      <span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line">      <span class="string">"color"</span>: c(),</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"body"</span>).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">      <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">1500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!-- 页面点击富强、民主 --><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicksocialvalue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="例图：-1"><a href="#例图：-1" class="headerlink" title="例图："></a>例图：</h3><p>![富强/民主点击效果](./hexo theme/click_democracy.png)</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hexo主题 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装与部署</title>
      <link href="/2019-10/27/Init/"/>
      <url>/2019-10/27/Init/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo博客搭建与部署"><a href="#Hexo博客搭建与部署" class="headerlink" title="Hexo博客搭建与部署"></a>Hexo博客搭建与部署</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>.（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p><ol><li>安装Node.js</li><li>安装Git</li></ol><blockquote><p><em>安装过程另附</em></p></blockquote><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>安装好上述的两个软件，搭建好环境后就可以开始搞一搞了</p><ol><li>打开Git命令行(Git bash)运行一下命令——安装Hexo</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. npm install -g hexo-cli</span><br><span class="line">2. npm i -g hexo</span><br></pre></td></tr></table></figure><ol start="2"><li><p>初始化Hexo，在命令行（即<code>Git Bash</code>）依次运行以下命令即可：</p><blockquote><p>以下，<code>&lt;folder&gt;</code>即存放Hexo初始化文件的路径， 即站点目录</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>​    新建完成后，在路径下，会产生这些文件和文件夹：</p><p><strong>注</strong>：</p><ul><li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong><code>Git Bash</code></strong>运行。</p></li><li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p></li></ul><p>路径为<code>&lt;folder&gt;\_config.yml</code></p><ul><li>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</li></ul><p>路径为<code>&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</code></p></blockquote><ol start="3"><li>启动服务器。在路径下，命令行（即<code>Git Bash</code>）输入以下命令，运行即可：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ol start="4"><li>浏览器访问网址： <code>http://localhost:4000/</code></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table><thead><tr><th align="center">资源</th><th align="center">内容/作用</th></tr></thead><tbody><tr><td align="center">package.json</td><td align="center">应用程序的信息。</td></tr><tr><td align="center">scaffolds</td><td align="center">模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</td></tr><tr><td align="center">source</td><td align="center">资源文件夹是存放用户资源的地方</td></tr><tr><td align="center">themes</td><td align="center">主题 文件夹。Hexo 会根据主题来生成静态页面。</td></tr><tr><td align="center">_config.yml</td><td align="center">网站的 配置 信息，您可以在此配置大部分的参数。</td></tr></tbody></table><h4 id="常用几个配置文件"><a href="#常用几个配置文件" class="headerlink" title="常用几个配置文件"></a>常用几个配置文件</h4><h5 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h5><ul><li><strong>Hexo/_config.yml</strong>    –（<strong>Hexo代表博客根目录</strong>）</li></ul><blockquote><p>根目录下的<a href>_config.yml</a>，用作配置网页全局的文件</p></blockquote><h6 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h6><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词。使用半角逗号 <code>,</code> 分隔多个关键词。</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><blockquote><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p></blockquote><h6 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h6><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址</td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls</code></td><td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener"><code>permalink</code></a> 的值来美化 URL</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls.trailing_index</code></td><td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="left"><code>true</code></td></tr></tbody></table><p><strong>网站存放在子目录</strong></p><blockquote><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/hexo</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/hexo/</code>。</p></blockquote><ul><li><strong>blog/themes/next/_config.yml</strong>    –（<strong>next代表当前使用的主题文件目录</strong>）</li></ul><blockquote><p>主题目录下的<a href>_config.yml</a>，用作配置主题的文件</p></blockquote><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="部署到GItHub"><a href="#部署到GItHub" class="headerlink" title="部署到GItHub"></a>部署到GItHub</h3><ul><li>创建一个<code>repository——版本库</code>，名称为<code>yourname.github.io</code>，其中<code>yourname</code>是你的GitHub名称，按照这个规则创建才有用</li></ul><blockquote><p>eg：<a href="https://github.com/xjc5772/xjc5772.github.io" target="_blank" rel="noopener">xjc5772.github.io</a>  这是我的GItHub命名</p></blockquote><p><img alt="GitHub库的创建" data-src="https://i.loli.net/2019/10/30/WkmKsHUtwQglj2v.png" class="lazyload"></p><ul><li>接着在GitBash中，配置GitHub的账户信息（YourName和YourEmail换成GitHub的用户信息）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"YourName"</span></span><br><span class="line">$ git config --global user.email <span class="string">"YourEmail"</span></span><br></pre></td></tr></table></figure><p>若怕命令错处的话，可以键入命令键入下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure><ul><li>创建SSH。生成SSH。然后按下图的方式找到<code>id_rsa.pub</code>，查看<code>id_rsa.pub</code>，获取SSH</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"YourEmail"</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>配置SSH。将获取的SSH放到GitHub中</li></ul><blockquote><p>添加一个 <code>New SSH key</code> ，title随便取，key就填刚刚那一段。</p></blockquote><p><img alt="配置SSH" data-src="https://i.loli.net/2019/10/30/DXHn3y2xLtb7alO.png" class="lazyload"></p><p><img alt="添加SSH" data-src="https://i.loli.net/2019/10/30/BQPYkKhNWwJvnaA.png" class="lazyload"></p><blockquote><p>在Gitbash中验证是否添加成功：<code>ssh -T git@github.com</code></p></blockquote><ul><li>配置<code>_config.yml</code>。打开根目录下的<code>_config.yml</code>，修改文件配置（<em>冒号之后都是有一个半角空格的</em>）</li></ul><blockquote><p>url: <a href="https://YourgithubName.github.io/" target="_blank" rel="noopener">https://YourgithubName.github.io/</a></p></blockquote><blockquote><p>deploy:<br>    type: git<br>    repo: <a href="https://github.com/YourgithubName/YourgithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourgithubName/YourgithubName.github.io.git</a><br>    branch: master</p></blockquote><p><strong>deploy</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>repo</code></td><td align="left">库（Repository）地址</td></tr><tr><td align="left"><code>branch</code></td><td align="left">分支名称。如果不指定，则默认值为 master</td></tr><tr><td align="left"><code>message</code></td><td align="left">自定义提交信息 (默认为  Site updated: &#123; &#123;  now(‘YYYY-MM-DD HH:mm:ss’) &#125; &#125; )</td></tr></tbody></table><ul><li>安装<code>deploy-git</code>。安装部署命令，这样才能用命令部署到GitHub</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>接着依次执行下列命令：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>hexo clean清除了你之前生成的东西，也可以不加。</p><p>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写</p><p>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password</p></blockquote><ul><li>在浏览器中输入<code>http://yourgithubname.github.io</code>就可以看到你的个人博客啦，嗨不嗨！</li><li>感觉gitbash中东西太多的时候输入<code>clear</code>命令清空。</li></ul><blockquote><p>后续会更新Hexo的主题安装与配置，毕竟一个好的、优美的页面更能给人带来愉悦感</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019-10/20/hello-world/"/>
      <url>/2019-10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
